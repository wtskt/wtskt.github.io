<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>elasticsearch学习笔记</title>
      <link href="/posts/fa44ecc1.html"/>
      <url>/posts/fa44ecc1.html</url>
      
        <content type="html"><![CDATA[<h2 id="第1章-Elasticsearch概述"><a href="#第1章-Elasticsearch概述" class="headerlink" title="第1章 Elasticsearch概述"></a>第1章 Elasticsearch概述</h2><h3 id="01-开篇"><a href="#01-开篇" class="headerlink" title="01-开篇"></a>01-开篇</h3><p><a href="https://www.bilibili.com/video/BV1hh411D7sb">教学视频</a></p><p>结构化数据</p><p><img src="../assets/elasticsearch/db146e37101d065a68674dd20f8ea3cb.png" alt=""></p><p>非结构化数据</p><p><img src="../assets/elasticsearch/c3de5021542b027c48467a9b5c9b7e48.png" alt=""></p><p>半结构化数据</p><p><img src="../assets/elasticsearch/3c67fdd415d410e9499cb505eddbdee4.png" alt=""></p><h3 id="02-技术选型"><a href="#02-技术选型" class="headerlink" title="02-技术选型"></a>02-技术选型</h3><h4 id="Elasticsearch-是什么"><a href="#Elasticsearch-是什么" class="headerlink" title="Elasticsearch 是什么"></a>Elasticsearch 是什么</h4><p>The Elastic Stack, 包括 Elasticsearch、 Kibana、 Beats 和 Logstash（也称为 ELK Stack）。能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。</p><p>Elaticsearch，简称为 ES， ES 是一个 <strong>开源的高扩展的分布式全文搜索引擎</strong> ， 是整个 ElasticStack 技术栈的核心。</p><p>它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。</p><blockquote><p>elastic<br>英 [ɪˈlæstɪk] 美 [ɪˈlæstɪk]<br>n. 橡皮圈(或带);松紧带<br>adj. 橡皮圈(或带)的;有弹性的;有弹力的;灵活的;可改变的;可伸缩的</p></blockquote><h4 id="全文搜索引擎"><a href="#全文搜索引擎" class="headerlink" title="全文搜索引擎"></a>全文搜索引擎</h4><p>Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。</p><p>一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对 SQL 的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。</p><p>基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：</p><ul><li>搜索的数据对象是大量的非结构化的文本数据。</li><li>文件记录量达到数十万或数百万个甚至更多。</li><li>支持大量基于交互式文本的查询。</li><li>需求非常灵活的全文搜索查询。</li><li>对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足。</li><li>对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎 。</li></ul><p><strong>这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎</strong> 。它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。</p><h4 id="Elasticsearch-应用案例"><a href="#Elasticsearch-应用案例" class="headerlink" title="Elasticsearch 应用案例"></a>Elasticsearch 应用案例</h4><ul><li>GitHub: 2013 年初，抛弃了 Solr，采取 Elasticsearch 来做 PB 级的搜索。 “GitHub 使用Elasticsearch 搜索 20TB 的数据，包括 13 亿文件和 1300 亿行代码”。</li><li>维基百科：启动以 Elasticsearch 为基础的核心搜索架构</li><li>百度：目前广泛使用 Elasticsearch 作为文本数据分析，采集百度所有服务器上的各类指标数据及用户自定义数据，通过对各种数据进行多维分析展示，辅助定位分析实例异常或业务层面异常。目前覆盖百度内部 20 多个业务线（包括云分析、网盟、预测、文库、直达号、钱包、 风控等），单集群最大 100 台机器， 200 个 ES 节点，每天导入 30TB+数据。</li><li>新浪：使用 Elasticsearch 分析处理 32 亿条实时日志。</li><li>阿里：使用 Elasticsearch 构建日志采集和分析体系。</li><li>Stack Overflow：解决 Bug 问题的网站，全英文，编程人员交流的网站。</li></ul><h3 id="03-教学大纲"><a href="#03-教学大纲" class="headerlink" title="03-教学大纲"></a>03-教学大纲</h3><ul><li>第1章 Elasticsearch概述</li><li>第2章 Elasticsearch入门</li><li>第3章 Elasticsearch环境</li><li>第4章 Elasticsearch进阶</li><li>第5章 Elasticsearch集成</li><li>第6章 Elasticsearch优化</li><li>第7章 Elasticsearch面试题</li></ul><h2 id="第2章-Elasticsearch入门"><a href="#第2章-Elasticsearch入门" class="headerlink" title="第2章 Elasticsearch入门"></a>第2章 Elasticsearch入门</h2><h3 id="04-入门-环境准备"><a href="#04-入门-环境准备" class="headerlink" title="04-入门-环境准备"></a>04-入门-环境准备</h3><p><a href="https://www.elastic.co/cn/">官方网址</a></p><p><a href="https://www.elastic.co/guide/index.html">官方文档</a></p><p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">Elasticsearch 7.8.0下载页面</a></p><p>Windows 版的 Elasticsearch 压缩包，解压即安装完毕，解压后的 Elasticsearch 的目录结构如下 ：</p><div class="table-container"><table><thead><tr><th>目录</th><th>含义</th></tr></thead><tbody><tr><td>bin</td><td>可执行脚本目录</td></tr><tr><td>config</td><td>配置目录</td></tr><tr><td>jdk</td><td>内置 JDK 目录</td></tr><tr><td>lib</td><td>类库</td></tr><tr><td>logs</td><td>日志目录</td></tr><tr><td>modules</td><td>模块目录</td></tr><tr><td>plugins</td><td>插件目录</td></tr></tbody></table></div><p>解压后，进入 bin 文件目录，点击 elasticsearch.bat 文件启动 ES 服务 。</p><p>注意： 9300 端口为 Elasticsearch 集群间组件的通信端口， 9200 端口为浏览器访问的 http协议 RESTful 端口。</p><p>打开浏览器，输入地址： <a href="http://localhost:9200，测试返回结果，返回结果如下：">http://localhost:9200，测试返回结果，返回结果如下：</a></p><pre><code>&#123;  &quot;name&quot; : &quot;DESKTOP-LNJQ0VF&quot;,  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,  &quot;cluster_uuid&quot; : &quot;nCZqBhfdT1-pw8Yas4QU9w&quot;,  &quot;version&quot; : &#123;    &quot;number&quot; : &quot;7.8.0&quot;,    &quot;build_flavor&quot; : &quot;default&quot;,    &quot;build_type&quot; : &quot;zip&quot;,    &quot;build_hash&quot; : &quot;757314695644ea9a1dc2fecd26d1a43856725e65&quot;,    &quot;build_date&quot; : &quot;2020-06-14T19:35:50.234439Z&quot;,    &quot;build_snapshot&quot; : false,    &quot;lucene_version&quot; : &quot;8.5.1&quot;,    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;  &#125;,  &quot;tagline&quot; : &quot;You Know, for Search&quot;&#125;</code></pre><h3 id="05-入门-RESTful-amp-JSON"><a href="#05-入门-RESTful-amp-JSON" class="headerlink" title="05-入门-RESTful &amp; JSON"></a>05-入门-RESTful &amp; JSON</h3><p>REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。 Web 应用程序最重要的 REST 原则是，客户端和服务器之间的交互在请求之间是无状态的。从客户端到服务器的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外，无状态请求可以由任何可用服务器回答，这十分适合云计算之类的环境。客户端可以缓存数据以改进性能。</p><p>在服务器端，应用程序状态和功能可以分为各种资源。资源是一个有趣的概念实体，它向客户端公开。资源的例子有：应用程序对象、数据库记录、算法等等。每个资源都使用 URI(Universal Resource Identifier) 得到一个唯一的地址。所有资源都共享统一的接口，以便在客户端和服务器之间传输状态。使用的是标准的 HTTP 方法，比如 GET、 PUT、 POST 和DELETE。</p><p>在 REST 样式的 Web 服务中，每个资源都有一个地址。资源本身都是方法调用的目<br>标，方法列表对所有资源都是一样的。这些方法都是标准方法，包括 HTTP GET、 POST、PUT、 DELETE，还可能包括 HEAD 和 OPTIONS。简单的理解就是， <strong>如果想要访问互联网上的资源，就必须向资源所在的服务器发出请求，请求体中必须包含资源的网络路径， 以及对资源进行的操作(增删改查)</strong> 。</p><p>REST 样式的 Web 服务若有返回结果，大多数以JSON字符串形式返回。</p><h3 id="06-入门-Postman客户端工具"><a href="#06-入门-Postman客户端工具" class="headerlink" title="06-入门-Postman客户端工具"></a>06-入门-Postman客户端工具</h3><p>如果直接通过浏览器向 Elasticsearch 服务器发请求，那么需要在发送的请求中包含<br>HTTP 标准的方法，而 HTTP 的大部分特性且仅支持 GET 和 POST 方法。所以为了能方便地进行客户端的访问，可以使用 Postman 软件Postman 是一款强大的网页调试工具，提供功能强大的 Web API 和 HTTP 请求调试。</p><p>软件功能强大，界面简洁明晰、操作方便快捷，设计得很人性化。 Postman 中文版能够发送任何类型的 HTTP 请求 (GET, HEAD, POST, PUT…)，不仅能够表单提交，且可以附带任意类型请求体。</p><p><a href="https://www.postman.com/downloads/">Postman下载页面</a></p><h3 id="07-入门-倒排索引"><a href="#07-入门-倒排索引" class="headerlink" title="07-入门-倒排索引"></a>07-入门-倒排索引</h3><p>正排索引（传统）</p><div class="table-container"><table><thead><tr><th>id</th><th>content</th></tr></thead><tbody><tr><td>1001</td><td>my name is zhang san</td></tr><tr><td>1002</td><td>my name is li si</td></tr></tbody></table></div><p>倒排索引</p><div class="table-container"><table><thead><tr><th>keyword</th><th>id</th></tr></thead><tbody><tr><td>name</td><td>1001, 1002</td></tr><tr><td>zhang</td><td>1001</td></tr></tbody></table></div><p>Elasticsearch 是 <strong>面向文档型数据库</strong> ，一条数据在这里就是一个文档。 为了方便大家理解，我们将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比</p><p><img src="../assets/elasticsearch/fb2d75748469e8880f85ff9825557db4.png" alt=""></p><p>ES 里的 Index 可以看做一个库，而 Types 相当于表， Documents 则相当于表的行。这里 Types 的概念已经被逐渐弱化， Elasticsearch 6.X 中，一个 index 下已经只能包含一个type， Elasticsearch 7.X 中, Type 的概念已经被删除了。</p><h3 id="08-入门-HTTP-索引-创建"><a href="#08-入门-HTTP-索引-创建" class="headerlink" title="08-入门-HTTP-索引-创建"></a>08-入门-HTTP-索引-创建</h3><p>对比关系型数据库，创建索引就等同于创建数据库。</p><p>在 Postman 中，向 ES 服务器发 PUT 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p><p>请求后，服务器返回响应：</p><pre><code>&#123;    &quot;acknowledged&quot;: true,//响应结果    &quot;shards_acknowledged&quot;: true,//分片结果    &quot;index&quot;: &quot;shopping&quot;//索引名称&#125;</code></pre><p>后台日志：</p><pre><code>[2021-04-08T13:57:06,954][INFO ][o.e.c.m.MetadataCreateIndexService] [DESKTOP-LNJQ0VF] [shopping] creating index, cause [api], templates [], shards [1]/[1], mappings []</code></pre><p>如果重复发 PUT 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a> 添加索引，会返回错误信息 :</p><pre><code>&#123;    &quot;error&quot;: &#123;        &quot;root_cause&quot;: [            &#123;                &quot;type&quot;: &quot;resource_already_exists_exception&quot;,                &quot;reason&quot;: &quot;index [shopping/J0WlEhh4R7aDrfIc3AkwWQ] already exists&quot;,                &quot;index_uuid&quot;: &quot;J0WlEhh4R7aDrfIc3AkwWQ&quot;,                &quot;index&quot;: &quot;shopping&quot;            &#125;        ],        &quot;type&quot;: &quot;resource_already_exists_exception&quot;,        &quot;reason&quot;: &quot;index [shopping/J0WlEhh4R7aDrfIc3AkwWQ] already exists&quot;,        &quot;index_uuid&quot;: &quot;J0WlEhh4R7aDrfIc3AkwWQ&quot;,        &quot;index&quot;: &quot;shopping&quot;    &#125;,    &quot;status&quot;: 400&#125;</code></pre><h3 id="09-入门-HTTP-索引-查询-amp-删除"><a href="#09-入门-HTTP-索引-查询-amp-删除" class="headerlink" title="09-入门-HTTP-索引-查询 &amp; 删除"></a>09-入门-HTTP-索引-查询 &amp; 删除</h3><h4 id="查看所有索引"><a href="#查看所有索引" class="headerlink" title="查看所有索引"></a>查看所有索引</h4><p>在 Postman 中，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/_cat/indices?v">http://127.0.0.1:9200/_cat/indices?v</a></p><p>这里请求路径中的_cat 表示查看的意思， indices 表示索引，所以整体含义就是查看当前 ES服务器中的所有索引，就好像 MySQL 中的 show tables 的感觉，服务器响应结果如下 :</p><pre><code>health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.sizeyellow open   shopping J0WlEhh4R7aDrfIc3AkwWQ   1   1          0            0       208b           208b</code></pre><div class="table-container"><table><thead><tr><th>表头</th><th>含义</th></tr></thead><tbody><tr><td>health</td><td>当前服务器健康状态： green(集群完整) yellow(单点正常、集群不完整) red(单点不正常)</td></tr><tr><td>status</td><td>索引打开、关闭状态</td></tr><tr><td>index</td><td>索引名</td></tr><tr><td>uuid</td><td>索引统一编号</td></tr><tr><td>pri</td><td>主分片数量</td></tr><tr><td>rep</td><td>副本数量</td></tr><tr><td>docs.count</td><td>可用文档数量</td></tr><tr><td>docs.deleted</td><td>文档删除状态（逻辑删除）</td></tr><tr><td>store.size</td><td>主分片和副分片整体占空间大小</td></tr><tr><td>pri.store.size</td><td>主分片占空间大小</td></tr></tbody></table></div><h4 id="查看单个索引"><a href="#查看单个索引" class="headerlink" title="查看单个索引"></a>查看单个索引</h4><p>在 Postman 中，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p><p>返回结果如下：</p><pre><code>&#123;    &quot;shopping&quot;: &#123;//索引名        &quot;aliases&quot;: &#123;&#125;,//别名        &quot;mappings&quot;: &#123;&#125;,//映射        &quot;settings&quot;: &#123;//设置            &quot;index&quot;: &#123;//设置 - 索引                &quot;creation_date&quot;: &quot;1617861426847&quot;,//设置 - 索引 - 创建时间                &quot;number_of_shards&quot;: &quot;1&quot;,//设置 - 索引 - 主分片数量                &quot;number_of_replicas&quot;: &quot;1&quot;,//设置 - 索引 - 主分片数量                &quot;uuid&quot;: &quot;J0WlEhh4R7aDrfIc3AkwWQ&quot;,//设置 - 索引 - 主分片数量                &quot;version&quot;: &#123;//设置 - 索引 - 主分片数量                    &quot;created&quot;: &quot;7080099&quot;                &#125;,                &quot;provided_name&quot;: &quot;shopping&quot;//设置 - 索引 - 主分片数量            &#125;        &#125;    &#125;&#125;</code></pre><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><p>在 Postman 中，向 ES 服务器发 DELETE 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p><p>返回结果如下：</p><pre><code>&#123;    &quot;acknowledged&quot;: true&#125;</code></pre><p>再次查看所有索引，GET <a href="http://127.0.0.1:9200/_cat/indices?v，返回结果如下：">http://127.0.0.1:9200/_cat/indices?v，返回结果如下：</a></p><pre><code>health status index uuid pri rep docs.count docs.deleted store.size pri.store.size</code></pre><p>成功删除。</p><h3 id="10-入门-HTTP-文档-创建（Put-amp-Post）"><a href="#10-入门-HTTP-文档-创建（Put-amp-Post）" class="headerlink" title="10-入门-HTTP-文档-创建（Put &amp; Post）"></a>10-入门-HTTP-文档-创建（Put &amp; Post）</h3><p>假设索引已经创建好了，接下来我们来创建文档，并添加数据。这里的文档可以类比为关系型数据库中的表数据，添加的数据格式为 JSON 格式</p><p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc，请求体JSON内容为：">http://127.0.0.1:9200/shopping/_doc，请求体JSON内容为：</a></p><pre><code>&#123;    &quot;title&quot;:&quot;小米手机&quot;,    &quot;category&quot;:&quot;小米&quot;,    &quot;images&quot;:&quot;http://www.gulixueyuan.com/xm.jpg&quot;,    &quot;price&quot;:3999.00&#125;</code></pre><p><img src="../assets/elasticsearch/c59ec2604a4f54678f1249112cc125fd.png" alt=""></p><p>注意，此处发送请求的方式必须为 POST，不能是 PUT，否则会发生错误 。</p><p>返回结果：</p><pre><code>&#123;    &quot;_index&quot;: &quot;shopping&quot;,//索引    &quot;_type&quot;: &quot;_doc&quot;,//类型-文档    &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,//唯一标识，可以类比为 MySQL 中的主键，随机生成    &quot;_version&quot;: 1,//版本    &quot;result&quot;: &quot;created&quot;,//结果，这里的 create 表示创建成功    &quot;_shards&quot;: &#123;//        &quot;total&quot;: 2,//分片 - 总数        &quot;successful&quot;: 1,//分片 - 总数        &quot;failed&quot;: 0//分片 - 总数    &#125;,    &quot;_seq_no&quot;: 0,    &quot;_primary_term&quot;: 1&#125;</code></pre><p>上面的数据创建后，由于没有指定数据唯一性标识（ID），默认情况下， ES 服务器会随机生成一个。</p><p>如果想要自定义唯一性标识，需要在创建时指定： <a href="http://127.0.0.1:9200/shopping/_doc/1，请求体JSON内容为：">http://127.0.0.1:9200/shopping/_doc/1，请求体JSON内容为：</a></p><pre><code>&#123;    &quot;title&quot;:&quot;小米手机&quot;,    &quot;category&quot;:&quot;小米&quot;,    &quot;images&quot;:&quot;http://www.gulixueyuan.com/xm.jpg&quot;,    &quot;price&quot;:3999.00&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;_index&quot;: &quot;shopping&quot;,    &quot;_type&quot;: &quot;_doc&quot;,    &quot;_id&quot;: &quot;1&quot;,//&lt;------------------自定义唯一性标识    &quot;_version&quot;: 1,    &quot;result&quot;: &quot;created&quot;,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 2,        &quot;successful&quot;: 1,        &quot;failed&quot;: 0    &#125;,    &quot;_seq_no&quot;: 1,    &quot;_primary_term&quot;: 1&#125;</code></pre><p><strong>此处需要注意：如果增加数据时明确数据主键，那么请求方式也可以为 PUT。</strong></p><h3 id="11-入门-HTTP-查询-主键查询-amp-全查询"><a href="#11-入门-HTTP-查询-主键查询-amp-全查询" class="headerlink" title="11-入门-HTTP-查询-主键查询 &amp; 全查询"></a>11-入门-HTTP-查询-主键查询 &amp; 全查询</h3><p>查看文档时，需要指明文档的唯一性标识，类似于 MySQL 中数据的主键查询</p><p>在 Postman 中，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1</a> 。</p><p>返回结果如下：</p><pre><code>&#123;    &quot;_index&quot;: &quot;shopping&quot;,    &quot;_type&quot;: &quot;_doc&quot;,    &quot;_id&quot;: &quot;1&quot;,    &quot;_version&quot;: 1,    &quot;_seq_no&quot;: 1,    &quot;_primary_term&quot;: 1,    &quot;found&quot;: true,    &quot;_source&quot;: &#123;        &quot;title&quot;: &quot;小米手机&quot;,        &quot;category&quot;: &quot;小米&quot;,        &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,        &quot;price&quot;: 3999    &#125;&#125;</code></pre><p>查找不存在的内容，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1001。">http://127.0.0.1:9200/shopping/_doc/1001。</a></p><p>返回结果如下：</p><pre><code>&#123;    &quot;_index&quot;: &quot;shopping&quot;,    &quot;_type&quot;: &quot;_doc&quot;,    &quot;_id&quot;: &quot;1001&quot;,    &quot;found&quot;: false&#125;</code></pre><p>查看索引下所有数据，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping/_search。">http://127.0.0.1:9200/shopping/_search。</a></p><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 133,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 2,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 1,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 3999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;1&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 3999                &#125;            &#125;        ]    &#125;&#125;</code></pre><h3 id="12-入门-HTTP-全量修改-amp-局部修改-amp-删除"><a href="#12-入门-HTTP-全量修改-amp-局部修改-amp-删除" class="headerlink" title="12-入门-HTTP-全量修改 &amp; 局部修改 &amp; 删除"></a>12-入门-HTTP-全量修改 &amp; 局部修改 &amp; 删除</h3><h4 id="全量修改"><a href="#全量修改" class="headerlink" title="全量修改"></a>全量修改</h4><p>和新增文档一样，输入相同的 URL 地址请求，如果请求体变化，会将原有的数据内容覆盖</p><p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1</a></p><p>请求体JSON内容为:</p><pre><code>&#123;    &quot;title&quot;:&quot;华为手机&quot;,    &quot;category&quot;:&quot;华为&quot;,    &quot;images&quot;:&quot;http://www.gulixueyuan.com/hw.jpg&quot;,    &quot;price&quot;:1999.00&#125;</code></pre><p>修改成功后，服务器响应结果：</p><pre><code>&#123;    &quot;_index&quot;: &quot;shopping&quot;,    &quot;_type&quot;: &quot;_doc&quot;,    &quot;_id&quot;: &quot;1&quot;,    &quot;_version&quot;: 2,    &quot;result&quot;: &quot;updated&quot;,//&lt;-----------updated 表示数据被更新    &quot;_shards&quot;: &#123;        &quot;total&quot;: 2,        &quot;successful&quot;: 1,        &quot;failed&quot;: 0    &#125;,    &quot;_seq_no&quot;: 2,    &quot;_primary_term&quot;: 1&#125;</code></pre><h4 id="局部修改"><a href="#局部修改" class="headerlink" title="局部修改"></a>局部修改</h4><p>修改数据时，也可以只修改某一给条数据的局部信息</p><p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/shopping/_update/1。">http://127.0.0.1:9200/shopping/_update/1。</a></p><p>请求体JSON内容为:</p><pre><code>&#123;    &quot;doc&quot;: &#123;        &quot;title&quot;:&quot;小米手机&quot;,        &quot;category&quot;:&quot;小米&quot;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;_index&quot;: &quot;shopping&quot;,    &quot;_type&quot;: &quot;_doc&quot;,    &quot;_id&quot;: &quot;1&quot;,    &quot;_version&quot;: 3,    &quot;result&quot;: &quot;updated&quot;,//&lt;-----------updated 表示数据被更新    &quot;_shards&quot;: &#123;        &quot;total&quot;: 2,        &quot;successful&quot;: 1,        &quot;failed&quot;: 0    &#125;,    &quot;_seq_no&quot;: 3,    &quot;_primary_term&quot;: 1&#125;</code></pre><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1，查看修改内容：">http://127.0.0.1:9200/shopping/_doc/1，查看修改内容：</a></p><pre><code>&#123;    &quot;_index&quot;: &quot;shopping&quot;,    &quot;_type&quot;: &quot;_doc&quot;,    &quot;_id&quot;: &quot;1&quot;,    &quot;_version&quot;: 3,    &quot;_seq_no&quot;: 3,    &quot;_primary_term&quot;: 1,    &quot;found&quot;: true,    &quot;_source&quot;: &#123;        &quot;title&quot;: &quot;小米手机&quot;,        &quot;category&quot;: &quot;小米&quot;,        &quot;images&quot;: &quot;http://www.gulixueyuan.com/hw.jpg&quot;,        &quot;price&quot;: 1999    &#125;&#125;</code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>删除一个文档不会立即从磁盘上移除，它只是被标记成已删除（逻辑删除）。</p><p>在 Postman 中，向 ES 服务器发 DELETE 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1</a></p><p>返回结果：</p><pre><code>&#123;    &quot;_index&quot;: &quot;shopping&quot;,    &quot;_type&quot;: &quot;_doc&quot;,    &quot;_id&quot;: &quot;1&quot;,    &quot;_version&quot;: 4,    &quot;result&quot;: &quot;deleted&quot;,//&lt;---删除成功    &quot;_shards&quot;: &#123;        &quot;total&quot;: 2,        &quot;successful&quot;: 1,        &quot;failed&quot;: 0    &#125;,    &quot;_seq_no&quot;: 4,    &quot;_primary_term&quot;: 1&#125;</code></pre><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1，查看是否删除成功：">http://127.0.0.1:9200/shopping/_doc/1，查看是否删除成功：</a></p><pre><code>&#123;    &quot;_index&quot;: &quot;shopping&quot;,    &quot;_type&quot;: &quot;_doc&quot;,    &quot;_id&quot;: &quot;1&quot;,    &quot;found&quot;: false&#125;</code></pre><h3 id="13-入门-HTTP-条件查询-amp-分页查询-amp-查询排序"><a href="#13-入门-HTTP-条件查询-amp-分页查询-amp-查询排序" class="headerlink" title="13-入门-HTTP-条件查询 &amp; 分页查询 &amp; 查询排序"></a>13-入门-HTTP-条件查询 &amp; 分页查询 &amp; 查询排序</h3><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>假设有以下文档内容，（在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search）：">http://127.0.0.1:9200/shopping/_search）：</a></p><pre><code>&#123;    &quot;took&quot;: 5,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 6,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 1,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 3999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;        ]    &#125;&#125;</code></pre><h5 id="URL带参查询"><a href="#URL带参查询" class="headerlink" title="URL带参查询"></a>URL带参查询</h5><p><strong>查找category为小米的文档</strong> ，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search?q=category:小米，返回结果如下：">http://127.0.0.1:9200/shopping/_search?q=category:小米，返回结果如下：</a></p><pre><code>&#123;    &quot;took&quot;: 94,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 3,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 1.3862942,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,                &quot;_score&quot;: 1.3862942,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 3999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,                &quot;_score&quot;: 1.3862942,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,                &quot;_score&quot;: 1.3862942,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>上述为URL带参数形式查询，这很容易让不善者心怀恶意，或者参数值出现中文会出现乱码情况。为了避免这些情况，我们可用使用带JSON请求体请求进行查询。</p><h5 id="请求体带参查询"><a href="#请求体带参查询" class="headerlink" title="请求体带参查询"></a>请求体带参查询</h5><p>接下带JSON请求体，还是 <strong>查找category为小米的文档</strong> ，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search，附带JSON体如下：">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre><code>&#123;    &quot;query&quot;:&#123;        &quot;match&quot;:&#123;            &quot;category&quot;:&quot;小米&quot;        &#125;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 3,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 3,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 1.3862942,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,                &quot;_score&quot;: 1.3862942,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 3999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,                &quot;_score&quot;: 1.3862942,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,                &quot;_score&quot;: 1.3862942,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;        ]    &#125;&#125;</code></pre><h5 id="带请求体方式的查找所有内容"><a href="#带请求体方式的查找所有内容" class="headerlink" title="带请求体方式的查找所有内容"></a>带请求体方式的查找所有内容</h5><p><strong>查找所有文档内容</strong> ，也可以这样，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search，附带JSON体如下：">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre><code>&#123;    &quot;query&quot;:&#123;        &quot;match_all&quot;:&#123;&#125;    &#125;&#125;</code></pre><p>则返回所有文档内容：</p><pre><code>&#123;    &quot;took&quot;: 2,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 6,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 1,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 3999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;        ]    &#125;&#125;</code></pre><h5 id="查询指定字段"><a href="#查询指定字段" class="headerlink" title="查询指定字段"></a>查询指定字段</h5><p><strong>如果你想查询指定字段</strong> ，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search，附带JSON体如下：">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre><code>&#123;    &quot;query&quot;:&#123;        &quot;match_all&quot;:&#123;&#125;    &#125;,    &quot;_source&quot;:[&quot;title&quot;]&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 5,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 6,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 1,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;                &#125;            &#125;        ]    &#125;&#125;</code></pre><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search，附带JSON体如下：">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre><code>&#123;    &quot;query&quot;:&#123;        &quot;match_all&quot;:&#123;&#125;    &#125;,    &quot;from&quot;:0,    &quot;size&quot;:2&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 1,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 6,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 1,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 3999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;        ]    &#125;&#125;</code></pre><h4 id="查询排序"><a href="#查询排序" class="headerlink" title="查询排序"></a>查询排序</h4><p>如果你想通过排序查出价格最高的手机，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search，附带JSON体如下：">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre><code>&#123;    &quot;query&quot;:&#123;        &quot;match_all&quot;:&#123;&#125;    &#125;,    &quot;sort&quot;:&#123;        &quot;price&quot;:&#123;            &quot;order&quot;:&quot;desc&quot;        &#125;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 96,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 6,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: null,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,                &quot;_score&quot;: null,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 3999                &#125;,                &quot;sort&quot;: [                    3999                ]            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,                &quot;_score&quot;: null,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;,                &quot;sort&quot;: [                    1999                ]            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,                &quot;_score&quot;: null,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;,                &quot;sort&quot;: [                    1999                ]            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,                &quot;_score&quot;: null,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;,                &quot;sort&quot;: [                    1999                ]            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,                &quot;_score&quot;: null,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;,                &quot;sort&quot;: [                    1999                ]            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,                &quot;_score&quot;: null,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;,                &quot;sort&quot;: [                    1999                ]            &#125;        ]    &#125;&#125;</code></pre><h3 id="14-入门-HTTP-多条件查询-amp-范围查询"><a href="#14-入门-HTTP-多条件查询-amp-范围查询" class="headerlink" title="14-入门-HTTP-多条件查询 &amp; 范围查询"></a>14-入门-HTTP-多条件查询 &amp; 范围查询</h3><h4 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h4><p>假设想找出小米牌子，价格为3999元的。（must相当于数据库的&amp;&amp;）</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search，附带JSON体如下：">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre><code>&#123;    &quot;query&quot;:&#123;        &quot;bool&quot;:&#123;            &quot;must&quot;:[&#123;                &quot;match&quot;:&#123;                    &quot;category&quot;:&quot;小米&quot;                &#125;            &#125;,&#123;                &quot;match&quot;:&#123;                    &quot;price&quot;:3999.00                &#125;            &#125;]        &#125;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 134,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 1,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 2.3862944,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,                &quot;_score&quot;: 2.3862944,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 3999                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>假设想找出小米和华为的牌子。（should相当于数据库的||）</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search，附带JSON体如下：">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre><code>&#123;    &quot;query&quot;:&#123;        &quot;bool&quot;:&#123;            &quot;should&quot;:[&#123;                &quot;match&quot;:&#123;                    &quot;category&quot;:&quot;小米&quot;                &#125;            &#125;,&#123;                &quot;match&quot;:&#123;                    &quot;category&quot;:&quot;华为&quot;                &#125;            &#125;]        &#125;,        &quot;filter&quot;:&#123;            &quot;range&quot;:&#123;                &quot;price&quot;:&#123;                    &quot;gt&quot;:2000                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 8,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 6,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 1.3862942,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,                &quot;_score&quot;: 1.3862942,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 3999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,                &quot;_score&quot;: 1.3862942,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,                &quot;_score&quot;: 1.3862942,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,                &quot;_score&quot;: 1.3862942,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,                &quot;_score&quot;: 1.3862942,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,                &quot;_score&quot;: 1.3862942,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;        ]    &#125;&#125;</code></pre><h4 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h4><p>假设想找出小米和华为的牌子，价格大于2000元的手机。</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search，附带JSON体如下：">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre><code>&#123;    &quot;query&quot;:&#123;        &quot;bool&quot;:&#123;            &quot;should&quot;:[&#123;                &quot;match&quot;:&#123;                    &quot;category&quot;:&quot;小米&quot;                &#125;            &#125;,&#123;                &quot;match&quot;:&#123;                    &quot;category&quot;:&quot;华为&quot;                &#125;            &#125;],            &quot;filter&quot;:&#123;                &quot;range&quot;:&#123;                    &quot;price&quot;:&#123;                        &quot;gt&quot;:2000                    &#125;                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 72,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 1,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 1.3862942,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,                &quot;_score&quot;: 1.3862942,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 3999                &#125;            &#125;        ]    &#125;&#125;</code></pre><h3 id="15-入门-HTTP-全文检索-amp-完全匹配-amp-高亮查询"><a href="#15-入门-HTTP-全文检索-amp-完全匹配-amp-高亮查询" class="headerlink" title="15-入门-HTTP-全文检索 &amp; 完全匹配 &amp; 高亮查询"></a>15-入门-HTTP-全文检索 &amp; 完全匹配 &amp; 高亮查询</h3><h4 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h4><p>这功能像搜索引擎那样，如品牌输入“小华”，返回结果带回品牌有“小米”和华为的。</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search，附带JSON体如下：">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre><code>&#123;    &quot;query&quot;:&#123;        &quot;match&quot;:&#123;            &quot;category&quot; : &quot;小华&quot;        &#125;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 7,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 6,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 0.6931471,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,                &quot;_score&quot;: 0.6931471,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 3999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,                &quot;_score&quot;: 0.6931471,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,                &quot;_score&quot;: 0.6931471,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,                &quot;_score&quot;: 0.6931471,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,                &quot;_score&quot;: 0.6931471,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,                &quot;_score&quot;: 0.6931471,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;        ]    &#125;&#125;</code></pre><h4 id="完全匹配"><a href="#完全匹配" class="headerlink" title="完全匹配"></a>完全匹配</h4><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search，附带JSON体如下：">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre><code>&#123;    &quot;query&quot;:&#123;        &quot;match_phrase&quot;:&#123;            &quot;category&quot; : &quot;为&quot;        &#125;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 2,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 3,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 0.6931471,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,                &quot;_score&quot;: 0.6931471,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,                &quot;_score&quot;: 0.6931471,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,                &quot;_score&quot;: 0.6931471,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;        ]    &#125;&#125;</code></pre><h4 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h4><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search，附带JSON体如下：">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre><code>&#123;    &quot;query&quot;:&#123;        &quot;match_phrase&quot;:&#123;            &quot;category&quot; : &quot;为&quot;        &#125;    &#125;,    &quot;highlight&quot;:&#123;        &quot;fields&quot;:&#123;            &quot;category&quot;:&#123;&#125;//&lt;----高亮这字段        &#125;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 100,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 3,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 0.6931471,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,                &quot;_score&quot;: 0.6931471,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;,                &quot;highlight&quot;: &#123;                    &quot;category&quot;: [                        &quot;华&lt;em&gt;为&lt;/em&gt;&quot;//&lt;------高亮一个为字。                    ]                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,                &quot;_score&quot;: 0.6931471,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;,                &quot;highlight&quot;: &#123;                    &quot;category&quot;: [                        &quot;华&lt;em&gt;为&lt;/em&gt;&quot;                    ]                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,                &quot;_score&quot;: 0.6931471,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;,                &quot;highlight&quot;: &#123;                    &quot;category&quot;: [                        &quot;华&lt;em&gt;为&lt;/em&gt;&quot;                    ]                &#125;            &#125;        ]    &#125;&#125;</code></pre><h3 id="16-入门-HTTP-聚合查询"><a href="#16-入门-HTTP-聚合查询" class="headerlink" title="16-入门-HTTP-聚合查询"></a>16-入门-HTTP-聚合查询</h3><p>聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by，当然还有很多其他的聚合，例如取最大值max、平均值avg等等。</p><p>接下来按price字段进行分组：</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search，附带JSON体如下：">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre><code>&#123;    &quot;aggs&quot;:&#123;//聚合操作        &quot;price_group&quot;:&#123;//名称，随意起名            &quot;terms&quot;:&#123;//分组                &quot;field&quot;:&quot;price&quot;//分组字段            &#125;        &#125;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 63,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 6,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 1,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 3999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;小米手机&quot;,                    &quot;category&quot;: &quot;小米&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;shopping&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: &#123;                    &quot;title&quot;: &quot;华为手机&quot;,                    &quot;category&quot;: &quot;华为&quot;,                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,                    &quot;price&quot;: 1999                &#125;            &#125;        ]    &#125;,    &quot;aggregations&quot;: &#123;        &quot;price_group&quot;: &#123;            &quot;doc_count_error_upper_bound&quot;: 0,            &quot;sum_other_doc_count&quot;: 0,            &quot;buckets&quot;: [                &#123;                    &quot;key&quot;: 1999,                    &quot;doc_count&quot;: 5                &#125;,                &#123;                    &quot;key&quot;: 3999,                    &quot;doc_count&quot;: 1                &#125;            ]        &#125;    &#125;&#125;</code></pre><p>上面返回结果会附带原始数据的。若不想要不附带原始数据的结果，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search，附带JSON体如下：">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre><code>&#123;    &quot;aggs&quot;:&#123;        &quot;price_group&quot;:&#123;            &quot;terms&quot;:&#123;                &quot;field&quot;:&quot;price&quot;            &#125;        &#125;    &#125;,    &quot;size&quot;:0&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 60,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 6,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: null,        &quot;hits&quot;: []    &#125;,    &quot;aggregations&quot;: &#123;        &quot;price_group&quot;: &#123;            &quot;doc_count_error_upper_bound&quot;: 0,            &quot;sum_other_doc_count&quot;: 0,            &quot;buckets&quot;: [                &#123;                    &quot;key&quot;: 1999,                    &quot;doc_count&quot;: 5                &#125;,                &#123;                    &quot;key&quot;: 3999,                    &quot;doc_count&quot;: 1                &#125;            ]        &#125;    &#125;&#125;</code></pre><p>若想对所有手机价格求 <strong>平均值</strong> 。</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search，附带JSON体如下：">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre><code>&#123;    &quot;aggs&quot;:&#123;        &quot;price_avg&quot;:&#123;//名称，随意起名            &quot;avg&quot;:&#123;//求平均                &quot;field&quot;:&quot;price&quot;            &#125;        &#125;    &#125;,    &quot;size&quot;:0&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 14,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 6,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: null,        &quot;hits&quot;: []    &#125;,    &quot;aggregations&quot;: &#123;        &quot;price_avg&quot;: &#123;            &quot;value&quot;: 2332.3333333333335        &#125;    &#125;&#125;</code></pre><h3 id="17-入门-HTTP-映射关系"><a href="#17-入门-HTTP-映射关系" class="headerlink" title="17-入门-HTTP-映射关系"></a>17-入门-HTTP-映射关系</h3><p>有了索引库，等于有了数据库中的 database。</p><p>接下来就需要建索引库(index)中的映射了，类似于数据库(database)中的表结构(table)。</p><p>创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)。</p><p>先创建一个索引：</p><pre><code># PUT http://127.0.0.1:9200/user</code></pre><p>返回结果：</p><pre><code>&#123;    &quot;acknowledged&quot;: true,    &quot;shards_acknowledged&quot;: true,    &quot;index&quot;: &quot;user&quot;&#125;</code></pre><p><strong>创建映射</strong></p><pre><code># PUT http://127.0.0.1:9200/user/_mapping&#123;    &quot;properties&quot;: &#123;        &quot;name&quot;:&#123;            &quot;type&quot;: &quot;text&quot;,            &quot;index&quot;: true        &#125;,        &quot;sex&quot;:&#123;            &quot;type&quot;: &quot;keyword&quot;,            &quot;index&quot;: true        &#125;,        &quot;tel&quot;:&#123;            &quot;type&quot;: &quot;keyword&quot;,            &quot;index&quot;: false        &#125;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;acknowledged&quot;: true&#125;</code></pre><p><strong>查询映射</strong></p><pre><code>#GET http://127.0.0.1:9200/user/_mapping</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;user&quot;: &#123;        &quot;mappings&quot;: &#123;            &quot;properties&quot;: &#123;                &quot;name&quot;: &#123;                    &quot;type&quot;: &quot;text&quot;                &#125;,                &quot;sex&quot;: &#123;                    &quot;type&quot;: &quot;keyword&quot;                &#125;,                &quot;tel&quot;: &#123;                    &quot;type&quot;: &quot;keyword&quot;,                    &quot;index&quot;: false                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>增加数据</p><pre><code>#PUT http://127.0.0.1:9200/user/_create/1001&#123;    &quot;name&quot;:&quot;小米&quot;,    &quot;sex&quot;:&quot;男的&quot;,    &quot;tel&quot;:&quot;1111&quot;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;_index&quot;: &quot;user&quot;,    &quot;_type&quot;: &quot;_doc&quot;,    &quot;_id&quot;: &quot;1001&quot;,    &quot;_version&quot;: 1,    &quot;result&quot;: &quot;created&quot;,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 2,        &quot;successful&quot;: 1,        &quot;failed&quot;: 0    &#125;,    &quot;_seq_no&quot;: 0,    &quot;_primary_term&quot;: 1&#125;</code></pre><p>查找name含有”小“数据：</p><pre><code>#GET http://127.0.0.1:9200/user/_search&#123;    &quot;query&quot;:&#123;        &quot;match&quot;:&#123;            &quot;name&quot;:&quot;小&quot;        &#125;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 495,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 1,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 0.2876821,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;user&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;1001&quot;,                &quot;_score&quot;: 0.2876821,                &quot;_source&quot;: &#123;                    &quot;name&quot;: &quot;小米&quot;,                    &quot;sex&quot;: &quot;男的&quot;,                    &quot;tel&quot;: &quot;1111&quot;                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>查找sex含有”男“数据：</p><pre><code>#GET http://127.0.0.1:9200/user/_search&#123;    &quot;query&quot;:&#123;        &quot;match&quot;:&#123;            &quot;sex&quot;:&quot;男&quot;        &#125;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 1,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 0,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: null,        &quot;hits&quot;: []    &#125;&#125;</code></pre><p>找不想要的结果，只因创建映射时”sex”的类型为”keyword”。</p><p>“sex”只能完全为”男的“，才能得出原数据。</p><pre><code>#GET http://127.0.0.1:9200/user/_search&#123;    &quot;query&quot;:&#123;        &quot;match&quot;:&#123;            &quot;sex&quot;:&quot;男的&quot;        &#125;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;took&quot;: 2,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 1,        &quot;successful&quot;: 1,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: &#123;            &quot;value&quot;: 1,            &quot;relation&quot;: &quot;eq&quot;        &#125;,        &quot;max_score&quot;: 0.2876821,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;user&quot;,                &quot;_type&quot;: &quot;_doc&quot;,                &quot;_id&quot;: &quot;1001&quot;,                &quot;_score&quot;: 0.2876821,                &quot;_source&quot;: &#123;                    &quot;name&quot;: &quot;小米&quot;,                    &quot;sex&quot;: &quot;男的&quot;,                    &quot;tel&quot;: &quot;1111&quot;                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>查询电话</p><pre><code># GET http://127.0.0.1:9200/user/_search&#123;    &quot;query&quot;:&#123;        &quot;match&quot;:&#123;            &quot;tel&quot;:&quot;11&quot;        &#125;    &#125;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;error&quot;: &#123;        &quot;root_cause&quot;: [            &#123;                &quot;type&quot;: &quot;query_shard_exception&quot;,                &quot;reason&quot;: &quot;failed to create query: Cannot search on field [tel] since it is not indexed.&quot;,                &quot;index_uuid&quot;: &quot;ivLnMfQKROS7Skb2MTFOew&quot;,                &quot;index&quot;: &quot;user&quot;            &#125;        ],        &quot;type&quot;: &quot;search_phase_execution_exception&quot;,        &quot;reason&quot;: &quot;all shards failed&quot;,        &quot;phase&quot;: &quot;query&quot;,        &quot;grouped&quot;: true,        &quot;failed_shards&quot;: [            &#123;                &quot;shard&quot;: 0,                &quot;index&quot;: &quot;user&quot;,                &quot;node&quot;: &quot;4P7dIRfXSbezE5JTiuylew&quot;,                &quot;reason&quot;: &#123;                    &quot;type&quot;: &quot;query_shard_exception&quot;,                    &quot;reason&quot;: &quot;failed to create query: Cannot search on field [tel] since it is not indexed.&quot;,                    &quot;index_uuid&quot;: &quot;ivLnMfQKROS7Skb2MTFOew&quot;,                    &quot;index&quot;: &quot;user&quot;,                    &quot;caused_by&quot;: &#123;                        &quot;type&quot;: &quot;illegal_argument_exception&quot;,                        &quot;reason&quot;: &quot;Cannot search on field [tel] since it is not indexed.&quot;                    &#125;                &#125;            &#125;        ]    &#125;,    &quot;status&quot;: 400&#125;</code></pre><p>报错只因创建映射时”tel”的”index”为false。</p><h3 id="18-入门-JavaAPI-环境准备"><a href="#18-入门-JavaAPI-环境准备" class="headerlink" title="18-入门-JavaAPI-环境准备"></a>18-入门-JavaAPI-环境准备</h3><p>新建Maven工程。</p><p>添加依赖：</p><pre><code>&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;        &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;        &lt;version&gt;7.8.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- elasticsearch 的客户端 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;        &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;        &lt;version&gt;7.8.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- elasticsearch 依赖 2.x 的 log4j --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;        &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;        &lt;version&gt;2.8.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;        &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;        &lt;version&gt;2.8.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;        &lt;version&gt;2.9.9&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- junit 单元测试 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.12&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>HelloElasticsearch</p><pre><code>import java.io.IOException;import org.apache.http.HttpHost;import org.elasticsearch.client.RestClient;import org.elasticsearch.client.RestHighLevelClient;public class HelloElasticsearch &#123;    public static void main(String[] args) throws IOException &#123;        // 创建客户端对象        RestHighLevelClient client = new RestHighLevelClient(                RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));//        ...        System.out.println(client);        // 关闭客户端连接        client.close();    &#125;&#125;</code></pre><h3 id="19-入门-JavaAPI-索引-创建"><a href="#19-入门-JavaAPI-索引-创建" class="headerlink" title="19-入门-JavaAPI-索引-创建"></a>19-入门-JavaAPI-索引-创建</h3><pre><code>import org.apache.http.HttpHost;import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.client.RestClient;import org.elasticsearch.client.RestHighLevelClient;import java.io.IOException;public class CreateIndex &#123;    public static void main(String[] args) throws IOException &#123;        // 创建客户端对象        RestHighLevelClient client = new RestHighLevelClient(                RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));        // 创建索引 - 请求对象        CreateIndexRequest request = new CreateIndexRequest(&quot;user2&quot;);        // 发送请求，获取响应        CreateIndexResponse response = client.indices().create(request,                RequestOptions.DEFAULT);        boolean acknowledged = response.isAcknowledged();        // 响应状态        System.out.println(&quot;操作状态 = &quot; + acknowledged);        // 关闭客户端连接        client.close();    &#125;&#125;</code></pre><p>后台打印：</p><pre><code>四月 09, 2021 2:12:08 下午 org.elasticsearch.client.RestClient logResponse警告: request [PUT http://localhost:9200/user2?master_timeout=30s&amp;include_type_name=true&amp;timeout=30s] returned 1 warnings: [299 Elasticsearch-7.8.0-757314695644ea9a1dc2fecd26d1a43856725e65 &quot;[types removal] Using include_type_name in create index requests is deprecated. The parameter will be removed in the next major version.&quot;]操作状态 = trueProcess finished with exit code 0</code></pre><h3 id="20-入门-JavaAPI-索引-查询-amp-删除"><a href="#20-入门-JavaAPI-索引-查询-amp-删除" class="headerlink" title="20-入门-JavaAPI-索引-查询 &amp; 删除"></a>20-入门-JavaAPI-索引-查询 &amp; 删除</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><pre><code>import org.apache.http.HttpHost;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.client.RestClient;import org.elasticsearch.client.RestHighLevelClient;import org.elasticsearch.client.indices.GetIndexRequest;import org.elasticsearch.client.indices.GetIndexResponse;import java.io.IOException;public class SearchIndex &#123;    public static void main(String[] args) throws IOException &#123;        // 创建客户端对象        RestHighLevelClient client = new RestHighLevelClient(                RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));        // 查询索引 - 请求对象        GetIndexRequest request = new GetIndexRequest(&quot;user2&quot;);        // 发送请求，获取响应        GetIndexResponse response = client.indices().get(request,                RequestOptions.DEFAULT);        System.out.println(&quot;aliases:&quot;+response.getAliases());        System.out.println(&quot;mappings:&quot;+response.getMappings());        System.out.println(&quot;settings:&quot;+response.getSettings());        client.close();    &#125;&#125;</code></pre><p>后台打印：</p><pre><code>aliases:&#123;user2=[]&#125;mappings:&#123;user2=org.elasticsearch.cluster.metadata.MappingMetadata@ad700514&#125;settings:&#123;user2=&#123;&quot;index.creation_date&quot;:&quot;1617948726976&quot;,&quot;index.number_of_replicas&quot;:&quot;1&quot;,&quot;index.number_of_shards&quot;:&quot;1&quot;,&quot;index.provided_name&quot;:&quot;user2&quot;,&quot;index.uuid&quot;:&quot;UGZ1ntcySnK6hWyP2qoVpQ&quot;,&quot;index.version.created&quot;:&quot;7080099&quot;&#125;&#125;Process finished with exit code 0</code></pre><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><pre><code>import org.apache.http.HttpHost;import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;import org.elasticsearch.action.support.master.AcknowledgedResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.client.RestClient;import org.elasticsearch.client.RestHighLevelClient;import java.io.IOException;public class DeleteIndex &#123;    public static void main(String[] args) throws IOException &#123;        RestHighLevelClient client = new RestHighLevelClient(                RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));        // 删除索引 - 请求对象        DeleteIndexRequest request = new DeleteIndexRequest(&quot;user2&quot;);        // 发送请求，获取响应        AcknowledgedResponse response = client.indices().delete(request,RequestOptions.DEFAULT);        // 操作结果        System.out.println(&quot;操作结果 ： &quot; + response.isAcknowledged());        client.close();    &#125;&#125;</code></pre><p>后台打印：</p><pre><code>操作结果 ： trueProcess finished with exit code 0</code></pre><h3 id="21-入门-JavaAPI-文档-新增-amp-修改"><a href="#21-入门-JavaAPI-文档-新增-amp-修改" class="headerlink" title="21-入门-JavaAPI-文档-新增 &amp; 修改"></a>21-入门-JavaAPI-文档-新增 &amp; 修改</h3><h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>上文由于频繁使用以下连接Elasticsearch和关闭它的代码，于是 <strong>个人</strong> 对它进行重构。</p><pre><code>public class SomeClass &#123;    public static void main(String[] args) throws IOException &#123;        RestHighLevelClient client = new RestHighLevelClient(                RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));        ...        client.close();    &#125;&#125;</code></pre><p>重构后的代码：</p><pre><code>import org.elasticsearch.client.RestHighLevelClient;public interface ElasticsearchTask &#123;    void doSomething(RestHighLevelClient client) throws Exception;&#125;</code></pre><p>​<br>​<br>    public class ConnectElasticsearch{</p><pre><code>    public static void connect(ElasticsearchTask task)&#123;        // 创建客户端对象        RestHighLevelClient client = new RestHighLevelClient(                RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));        try &#123;            task.doSomething(client);            // 关闭客户端连接            client.close();        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>接下来，如果想让Elasticsearch完成一些操作，就编写一个lambda式即可。</p><pre><code>public class SomeClass &#123;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(client -&gt; &#123;            //do something        &#125;);    &#125;&#125;</code></pre><p>​    </p><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><pre><code>import com.fasterxml.jackson.databind.ObjectMapper;import com.lun.elasticsearch.hello.ConnectElasticsearch;import com.lun.elasticsearch.model.User;import org.elasticsearch.action.index.IndexRequest;import org.elasticsearch.action.index.IndexResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.common.xcontent.XContentType;public class InsertDoc &#123;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(client -&gt; &#123;            // 新增文档 - 请求对象            IndexRequest request = new IndexRequest();            // 设置索引及唯一性标识            request.index(&quot;user&quot;).id(&quot;1001&quot;);            // 创建数据对象            User user = new User();            user.setName(&quot;zhangsan&quot;);            user.setAge(30);            user.setSex(&quot;男&quot;);            ObjectMapper objectMapper = new ObjectMapper();            String productJson = objectMapper.writeValueAsString(user);            // 添加文档数据，数据格式为 JSON 格式            request.source(productJson, XContentType.JSON);            // 客户端发送请求，获取响应对象            IndexResponse response = client.index(request, RequestOptions.DEFAULT);            3.打印结果信息            System.out.println(&quot;_index:&quot; + response.getIndex());            System.out.println(&quot;_id:&quot; + response.getId());            System.out.println(&quot;_result:&quot; + response.getResult());        &#125;);    &#125;&#125;</code></pre><p>后台打印：</p><pre><code>_index:user_id:1001_result:UPDATEDProcess finished with exit code 0</code></pre><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import org.elasticsearch.action.update.UpdateRequest;import org.elasticsearch.action.update.UpdateResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.common.xcontent.XContentType;public class UpdateDoc &#123;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(client -&gt; &#123;            // 修改文档 - 请求对象            UpdateRequest request = new UpdateRequest();            // 配置修改参数            request.index(&quot;user&quot;).id(&quot;1001&quot;);            // 设置请求体，对数据进行修改            request.doc(XContentType.JSON, &quot;sex&quot;, &quot;女&quot;);            // 客户端发送请求，获取响应对象            UpdateResponse response = client.update(request, RequestOptions.DEFAULT);            System.out.println(&quot;_index:&quot; + response.getIndex());            System.out.println(&quot;_id:&quot; + response.getId());            System.out.println(&quot;_result:&quot; + response.getResult());        &#125;);    &#125;&#125;</code></pre><p>后台打印：</p><pre><code>_index:user_id:1001_result:UPDATEDProcess finished with exit code 0</code></pre><h3 id="22-入门-JavaAPI-文档-查询-amp-删除"><a href="#22-入门-JavaAPI-文档-查询-amp-删除" class="headerlink" title="22-入门-JavaAPI-文档-查询 &amp; 删除"></a>22-入门-JavaAPI-文档-查询 &amp; 删除</h3><h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import org.elasticsearch.action.get.GetRequest;import org.elasticsearch.action.get.GetResponse;import org.elasticsearch.client.RequestOptions;public class GetDoc &#123;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(client -&gt; &#123;            //1.创建请求对象            GetRequest request = new GetRequest().index(&quot;user&quot;).id(&quot;1001&quot;);            //2.客户端发送请求，获取响应对象            GetResponse response = client.get(request, RequestOptions.DEFAULT);            3.打印结果信息            System.out.println(&quot;_index:&quot; + response.getIndex());            System.out.println(&quot;_type:&quot; + response.getType());            System.out.println(&quot;_id:&quot; + response.getId());            System.out.println(&quot;source:&quot; + response.getSourceAsString());        &#125;);    &#125;&#125;</code></pre><p>​    </p><p>后台打印：</p><pre><code>_index:user_type:_doc_id:1001source:&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:30,&quot;sex&quot;:&quot;男&quot;&#125;Process finished with exit code 0</code></pre><h4 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h4><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import org.elasticsearch.action.delete.DeleteRequest;import org.elasticsearch.action.delete.DeleteResponse;import org.elasticsearch.client.RequestOptions;public class DeleteDoc &#123;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(client -&gt; &#123;            //创建请求对象            DeleteRequest request = new DeleteRequest().index(&quot;user&quot;).id(&quot;1001&quot;);            //客户端发送请求，获取响应对象            DeleteResponse response = client.delete(request, RequestOptions.DEFAULT);            //打印信息            System.out.println(response.toString());        &#125;);    &#125;&#125;</code></pre><p>后台打印：</p><pre><code>DeleteResponse[index=user,type=_doc,id=1001,version=16,result=deleted,shards=ShardInfo&#123;total=2, successful=1, failures=[]&#125;]Process finished with exit code 0</code></pre><h3 id="23-入门-JavaAPI-文档-批量新增-amp-批量删除"><a href="#23-入门-JavaAPI-文档-批量新增-amp-批量删除" class="headerlink" title="23-入门-JavaAPI-文档-批量新增 &amp; 批量删除"></a>23-入门-JavaAPI-文档-批量新增 &amp; 批量删除</h3><h4 id="批量新增"><a href="#批量新增" class="headerlink" title="批量新增"></a>批量新增</h4><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import org.elasticsearch.action.bulk.BulkRequest;import org.elasticsearch.action.bulk.BulkResponse;import org.elasticsearch.action.index.IndexRequest;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.common.xcontent.XContentType;public class BatchInsertDoc &#123;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(client -&gt; &#123;            //创建批量新增请求对象            BulkRequest request = new BulkRequest();            request.add(new                    IndexRequest().index(&quot;user&quot;).id(&quot;1001&quot;).source(XContentType.JSON, &quot;name&quot;,                    &quot;zhangsan&quot;));            request.add(new                    IndexRequest().index(&quot;user&quot;).id(&quot;1002&quot;).source(XContentType.JSON, &quot;name&quot;,                            &quot;lisi&quot;));            request.add(new                    IndexRequest().index(&quot;user&quot;).id(&quot;1003&quot;).source(XContentType.JSON, &quot;name&quot;,                    &quot;wangwu&quot;));            //客户端发送请求，获取响应对象            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);            //打印结果信息            System.out.println(&quot;took:&quot; + responses.getTook());            System.out.println(&quot;items:&quot; + responses.getItems());        &#125;);    &#125;&#125;</code></pre><p>后台打印</p><pre><code>took:294msitems:[Lorg.elasticsearch.action.bulk.BulkItemResponse;@2beee7ffProcess finished with exit code 0</code></pre><h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import org.elasticsearch.action.bulk.BulkRequest;import org.elasticsearch.action.bulk.BulkResponse;import org.elasticsearch.action.delete.DeleteRequest;import org.elasticsearch.client.RequestOptions;public class BatchDeleteDoc &#123;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(client -&gt; &#123;            //创建批量删除请求对象            BulkRequest request = new BulkRequest();            request.add(new DeleteRequest().index(&quot;user&quot;).id(&quot;1001&quot;));            request.add(new DeleteRequest().index(&quot;user&quot;).id(&quot;1002&quot;));            request.add(new DeleteRequest().index(&quot;user&quot;).id(&quot;1003&quot;));            //客户端发送请求，获取响应对象            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);            //打印结果信息            System.out.println(&quot;took:&quot; + responses.getTook());            System.out.println(&quot;items:&quot; + responses.getItems());        &#125;);    &#125;&#125;</code></pre><p>后台打印</p><pre><code>took:108msitems:[Lorg.elasticsearch.action.bulk.BulkItemResponse;@7b02881eProcess finished with exit code 0</code></pre><p>​    </p><h3 id="24-入门-JavaAPI-文档-高级查询-全量查询"><a href="#24-入门-JavaAPI-文档-高级查询-全量查询" class="headerlink" title="24-入门-JavaAPI-文档-高级查询-全量查询"></a>24-入门-JavaAPI-文档-高级查询-全量查询</h3><p>先批量增加数据</p><pre><code>public class BatchInsertDoc &#123;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(client -&gt; &#123;            //创建批量新增请求对象            BulkRequest request = new BulkRequest();            request.add(new IndexRequest().index(&quot;user&quot;).id(&quot;1001&quot;).source(XContentType.JSON, &quot;name&quot;, &quot;zhangsan&quot;, &quot;age&quot;, &quot;10&quot;, &quot;sex&quot;,&quot;女&quot;));            request.add(new IndexRequest().index(&quot;user&quot;).id(&quot;1002&quot;).source(XContentType.JSON, &quot;name&quot;, &quot;lisi&quot;, &quot;age&quot;, &quot;30&quot;, &quot;sex&quot;,&quot;女&quot;));            request.add(new IndexRequest().index(&quot;user&quot;).id(&quot;1003&quot;).source(XContentType.JSON, &quot;name&quot;, &quot;wangwu1&quot;, &quot;age&quot;, &quot;40&quot;, &quot;sex&quot;,&quot;男&quot;));            request.add(new IndexRequest().index(&quot;user&quot;).id(&quot;1004&quot;).source(XContentType.JSON, &quot;name&quot;, &quot;wangwu2&quot;, &quot;age&quot;, &quot;20&quot;, &quot;sex&quot;,&quot;女&quot;));            request.add(new IndexRequest().index(&quot;user&quot;).id(&quot;1005&quot;).source(XContentType.JSON, &quot;name&quot;, &quot;wangwu3&quot;, &quot;age&quot;, &quot;50&quot;, &quot;sex&quot;,&quot;男&quot;));            request.add(new IndexRequest().index(&quot;user&quot;).id(&quot;1006&quot;).source(XContentType.JSON, &quot;name&quot;, &quot;wangwu4&quot;, &quot;age&quot;, &quot;20&quot;, &quot;sex&quot;,&quot;男&quot;));            //客户端发送请求，获取响应对象            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);            //打印结果信息            System.out.println(&quot;took:&quot; + responses.getTook());            System.out.println(&quot;items:&quot; + responses.getItems());        &#125;);    &#125;&#125;</code></pre><p>后台打印</p><pre><code>took:168msitems:[Lorg.elasticsearch.action.bulk.BulkItemResponse;@2beee7ffProcess finished with exit code 0</code></pre><p><strong>查询所有索引数据</strong></p><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import org.elasticsearch.action.search.SearchRequest;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.search.SearchHit;import org.elasticsearch.search.SearchHits;import org.elasticsearch.search.builder.SearchSourceBuilder;public class QueryDoc &#123;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(client -&gt; &#123;            // 创建搜索请求对象            SearchRequest request = new SearchRequest();            request.indices(&quot;user&quot;);            // 构建查询的请求体            SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();            // 查询所有数据            sourceBuilder.query(QueryBuilders.matchAllQuery());            request.source(sourceBuilder);            SearchResponse response = client.search(request, RequestOptions.DEFAULT);            // 查询匹配            SearchHits hits = response.getHits();            System.out.println(&quot;took:&quot; + response.getTook());            System.out.println(&quot;timeout:&quot; + response.isTimedOut());            System.out.println(&quot;total:&quot; + hits.getTotalHits());            System.out.println(&quot;MaxScore:&quot; + hits.getMaxScore());            System.out.println(&quot;hits========&gt;&gt;&quot;);            for (SearchHit hit : hits) &#123;            //输出每条查询的结果信息                System.out.println(hit.getSourceAsString());            &#125;            System.out.println(&quot;&lt;&lt;========&quot;);        &#125;);    &#125;&#125;</code></pre><p>后台打印</p><pre><code>took:2mstimeout:falsetotal:6 hitsMaxScore:1.0hits========&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&lt;&lt;========Process finished with exit code 0</code></pre><h3 id="25-入门-JavaAPI-文档-高级查询-分页查询-amp-条件查询-amp-查询排序"><a href="#25-入门-JavaAPI-文档-高级查询-分页查询-amp-条件查询-amp-查询排序" class="headerlink" title="25-入门-JavaAPI-文档-高级查询-分页查询 &amp; 条件查询 &amp; 查询排序"></a>25-入门-JavaAPI-文档-高级查询-分页查询 &amp; 条件查询 &amp; 查询排序</h3><h4 id="条件查询-1"><a href="#条件查询-1" class="headerlink" title="条件查询"></a>条件查询</h4><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import com.lun.elasticsearch.hello.ElasticsearchTask;import org.elasticsearch.action.search.SearchRequest;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.search.SearchHit;import org.elasticsearch.search.SearchHits;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.elasticsearch.search.sort.SortOrder;public class QueryDoc &#123;    public static final ElasticsearchTask SEARCH_BY_CONDITION = client -&gt; &#123;        // 创建搜索请求对象        SearchRequest request = new SearchRequest();        request.indices(&quot;user&quot;);        // 构建查询的请求体        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();        sourceBuilder.query(QueryBuilders.termQuery(&quot;age&quot;, &quot;30&quot;));        request.source(sourceBuilder);        SearchResponse response = client.search(request, RequestOptions.DEFAULT);        // 查询匹配        SearchHits hits = response.getHits();        System.out.println(&quot;took:&quot; + response.getTook());        System.out.println(&quot;timeout:&quot; + response.isTimedOut());        System.out.println(&quot;total:&quot; + hits.getTotalHits());        System.out.println(&quot;MaxScore:&quot; + hits.getMaxScore());        System.out.println(&quot;hits========&gt;&gt;&quot;);        for (SearchHit hit : hits) &#123;            //输出每条查询的结果信息            System.out.println(hit.getSourceAsString());        &#125;        System.out.println(&quot;&lt;&lt;========&quot;);    &#125;;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);    &#125;&#125;</code></pre><p>后台打印</p><pre><code>took:1mstimeout:falsetotal:1 hitsMaxScore:1.0hits========&gt;&gt;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&lt;&lt;========</code></pre><h4 id="分页查询-1"><a href="#分页查询-1" class="headerlink" title="分页查询"></a>分页查询</h4><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import com.lun.elasticsearch.hello.ElasticsearchTask;import org.elasticsearch.action.search.SearchRequest;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.search.SearchHit;import org.elasticsearch.search.SearchHits;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.elasticsearch.search.sort.SortOrder;public class QueryDoc &#123;    public static final ElasticsearchTask SEARCH_BY_PAGING = client -&gt; &#123;        // 创建搜索请求对象        SearchRequest request = new SearchRequest();        request.indices(&quot;user&quot;);        // 构建查询的请求体        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();        sourceBuilder.query(QueryBuilders.matchAllQuery());        // 分页查询        // 当前页其实索引(第一条数据的顺序号)， from        sourceBuilder.from(0);        // 每页显示多少条 size        sourceBuilder.size(2);        request.source(sourceBuilder);        SearchResponse response = client.search(request, RequestOptions.DEFAULT);        // 查询匹配        SearchHits hits = response.getHits();        System.out.println(&quot;took:&quot; + response.getTook());        System.out.println(&quot;timeout:&quot; + response.isTimedOut());        System.out.println(&quot;total:&quot; + hits.getTotalHits());        System.out.println(&quot;MaxScore:&quot; + hits.getMaxScore());        System.out.println(&quot;hits========&gt;&gt;&quot;);        for (SearchHit hit : hits) &#123;            //输出每条查询的结果信息            System.out.println(hit.getSourceAsString());        &#125;        System.out.println(&quot;&lt;&lt;========&quot;);    &#125;;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);    &#125;&#125;</code></pre><p>后台打印</p><pre><code>took:1mstimeout:falsetotal:6 hitsMaxScore:1.0hits========&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&lt;&lt;========</code></pre><h4 id="查询排序-1"><a href="#查询排序-1" class="headerlink" title="查询排序"></a>查询排序</h4><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import com.lun.elasticsearch.hello.ElasticsearchTask;import org.elasticsearch.action.search.SearchRequest;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.search.SearchHit;import org.elasticsearch.search.SearchHits;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.elasticsearch.search.sort.SortOrder;public class QueryDoc &#123;    public static final ElasticsearchTask SEARCH_WITH_ORDER = client -&gt; &#123;        // 创建搜索请求对象        SearchRequest request = new SearchRequest();        request.indices(&quot;user&quot;);        // 构建查询的请求体        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();        sourceBuilder.query(QueryBuilders.matchAllQuery());        // 排序        sourceBuilder.sort(&quot;age&quot;, SortOrder.ASC);        request.source(sourceBuilder);        SearchResponse response = client.search(request, RequestOptions.DEFAULT);        // 查询匹配        SearchHits hits = response.getHits();        System.out.println(&quot;took:&quot; + response.getTook());        System.out.println(&quot;timeout:&quot; + response.isTimedOut());        System.out.println(&quot;total:&quot; + hits.getTotalHits());        System.out.println(&quot;MaxScore:&quot; + hits.getMaxScore());        System.out.println(&quot;hits========&gt;&gt;&quot;);        for (SearchHit hit : hits) &#123;        //输出每条查询的结果信息            System.out.println(hit.getSourceAsString());        &#125;        System.out.println(&quot;&lt;&lt;========&quot;);    &#125;;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(SEARCH_WITH_ORDER);    &#125;&#125;</code></pre><p>​    </p><p>后台打印</p><pre><code>took:1mstimeout:falsetotal:6 hitsMaxScore:NaNhits========&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&lt;&lt;========</code></pre><h3 id="26-入门-JavaAPI-文档-高级查询-组合查询-amp-范围查询"><a href="#26-入门-JavaAPI-文档-高级查询-组合查询-amp-范围查询" class="headerlink" title="26-入门-JavaAPI-文档-高级查询-组合查询 &amp; 范围查询"></a>26-入门-JavaAPI-文档-高级查询-组合查询 &amp; 范围查询</h3><h4 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h4><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import com.lun.elasticsearch.hello.ElasticsearchTask;import org.elasticsearch.action.search.SearchRequest;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.index.query.BoolQueryBuilder;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.search.SearchHit;import org.elasticsearch.search.SearchHits;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.elasticsearch.search.sort.SortOrder;public class QueryDoc &#123;    public static final ElasticsearchTask SEARCH_BY_BOOL_CONDITION = client -&gt; &#123;        // 创建搜索请求对象        SearchRequest request = new SearchRequest();        request.indices(&quot;user&quot;);        // 构建查询的请求体        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        // 必须包含        boolQueryBuilder.must(QueryBuilders.matchQuery(&quot;age&quot;, &quot;30&quot;));        // 一定不含        boolQueryBuilder.mustNot(QueryBuilders.matchQuery(&quot;name&quot;, &quot;zhangsan&quot;));        // 可能包含        boolQueryBuilder.should(QueryBuilders.matchQuery(&quot;sex&quot;, &quot;男&quot;));        sourceBuilder.query(boolQueryBuilder);        request.source(sourceBuilder);        SearchResponse response = client.search(request, RequestOptions.DEFAULT);        // 查询匹配        SearchHits hits = response.getHits();        System.out.println(&quot;took:&quot; + response.getTook());        System.out.println(&quot;timeout:&quot; + response.isTimedOut());        System.out.println(&quot;total:&quot; + hits.getTotalHits());        System.out.println(&quot;MaxScore:&quot; + hits.getMaxScore());        System.out.println(&quot;hits========&gt;&gt;&quot;);        for (SearchHit hit : hits) &#123;            //输出每条查询的结果信息            System.out.println(hit.getSourceAsString());        &#125;        System.out.println(&quot;&lt;&lt;========&quot;);    &#125;;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(SEARCH_BY_BOOL_CONDITION);    &#125;&#125;</code></pre><p>后台打印</p><pre><code>took:28mstimeout:falsetotal:1 hitsMaxScore:1.0hits========&gt;&gt;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&lt;&lt;========Process finished with exit code 0</code></pre><h4 id="范围查询-1"><a href="#范围查询-1" class="headerlink" title="范围查询"></a>范围查询</h4><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import com.lun.elasticsearch.hello.ElasticsearchTask;import org.elasticsearch.action.search.SearchRequest;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.index.query.BoolQueryBuilder;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.index.query.RangeQueryBuilder;import org.elasticsearch.search.SearchHit;import org.elasticsearch.search.SearchHits;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.elasticsearch.search.sort.SortOrder;public class QueryDoc &#123;    public static final ElasticsearchTask SEARCH_BY_RANGE = client -&gt; &#123;        // 创建搜索请求对象        SearchRequest request = new SearchRequest();        request.indices(&quot;user&quot;);        // 构建查询的请求体        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();        RangeQueryBuilder rangeQuery = QueryBuilders.rangeQuery(&quot;age&quot;);        // 大于等于        //rangeQuery.gte(&quot;30&quot;);        // 小于等于        rangeQuery.lte(&quot;40&quot;);        sourceBuilder.query(rangeQuery);        request.source(sourceBuilder);        SearchResponse response = client.search(request, RequestOptions.DEFAULT);        // 查询匹配        SearchHits hits = response.getHits();        System.out.println(&quot;took:&quot; + response.getTook());        System.out.println(&quot;timeout:&quot; + response.isTimedOut());        System.out.println(&quot;total:&quot; + hits.getTotalHits());        System.out.println(&quot;MaxScore:&quot; + hits.getMaxScore());        System.out.println(&quot;hits========&gt;&gt;&quot;);        for (SearchHit hit : hits) &#123;        //输出每条查询的结果信息            System.out.println(hit.getSourceAsString());        &#125;        System.out.println(&quot;&lt;&lt;========&quot;);    &#125;;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(SEARCH_BY_RANGE);    &#125;&#125;</code></pre><p>​    </p><p>后台打印</p><pre><code>took:1mstimeout:falsetotal:5 hitsMaxScore:1.0hits========&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&lt;&lt;========Process finished with exit code 0</code></pre><h3 id="27-入门-JavaAPI-文档-高级查询-模糊查询-amp-高亮查询"><a href="#27-入门-JavaAPI-文档-高级查询-模糊查询-amp-高亮查询" class="headerlink" title="27-入门-JavaAPI-文档-高级查询-模糊查询 &amp; 高亮查询"></a>27-入门-JavaAPI-文档-高级查询-模糊查询 &amp; 高亮查询</h3><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import com.lun.elasticsearch.hello.ElasticsearchTask;import org.elasticsearch.action.search.SearchRequest;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.common.unit.Fuzziness;import org.elasticsearch.index.query.BoolQueryBuilder;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.index.query.RangeQueryBuilder;import org.elasticsearch.search.SearchHit;import org.elasticsearch.search.SearchHits;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.elasticsearch.search.sort.SortOrder;public class QueryDoc &#123;    public static final ElasticsearchTask SEARCH_BY_FUZZY_CONDITION = client -&gt; &#123;        // 创建搜索请求对象        SearchRequest request = new SearchRequest();        request.indices(&quot;user&quot;);        // 构建查询的请求体        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();        sourceBuilder.query(QueryBuilders.fuzzyQuery(&quot;name&quot;,&quot;wangwu&quot;).fuzziness(Fuzziness.ONE));        request.source(sourceBuilder);        SearchResponse response = client.search(request, RequestOptions.DEFAULT);        // 查询匹配        SearchHits hits = response.getHits();        System.out.println(&quot;took:&quot; + response.getTook());        System.out.println(&quot;timeout:&quot; + response.isTimedOut());        System.out.println(&quot;total:&quot; + hits.getTotalHits());        System.out.println(&quot;MaxScore:&quot; + hits.getMaxScore());        System.out.println(&quot;hits========&gt;&gt;&quot;);        for (SearchHit hit : hits) &#123;            //输出每条查询的结果信息            System.out.println(hit.getSourceAsString());        &#125;        System.out.println(&quot;&lt;&lt;========&quot;);    &#125;;</code></pre><p>​<br>        public static void main(String[] args) {<br>    //        ConnectElasticsearch.connect(SEARCH_ALL);<br>    //        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);<br>    //        ConnectElasticsearch.connect(SEARCH_BY_PAGING);<br>    //        ConnectElasticsearch.connect(SEARCH_WITH_ORDER);<br>    //        ConnectElasticsearch.connect(SEARCH_BY_BOOL_CONDITION);<br>    //        ConnectElasticsearch.connect(SEARCH_BY_RANGE);<br>            ConnectElasticsearch.connect(SEARCH_BY_FUZZY_CONDITION);<br>        }</p><pre><code>&#125;</code></pre><p>后台打印</p><pre><code>took:152mstimeout:falsetotal:4 hitsMaxScore:1.2837042hits========&gt;&gt;&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&lt;&lt;========Process finished with exit code 0</code></pre><h4 id="高亮查询-1"><a href="#高亮查询-1" class="headerlink" title="高亮查询"></a>高亮查询</h4><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import com.lun.elasticsearch.hello.ElasticsearchTask;import org.elasticsearch.action.search.SearchRequest;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.common.unit.Fuzziness;import org.elasticsearch.index.query.BoolQueryBuilder;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.index.query.RangeQueryBuilder;import org.elasticsearch.index.query.TermsQueryBuilder;import org.elasticsearch.search.SearchHit;import org.elasticsearch.search.SearchHits;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;import org.elasticsearch.search.fetch.subphase.highlight.HighlightField;import org.elasticsearch.search.sort.SortOrder;import java.util.Map;public class QueryDoc &#123;    public static final ElasticsearchTask SEARCH_WITH_HIGHLIGHT = client -&gt; &#123;        // 高亮查询        SearchRequest request = new SearchRequest().indices(&quot;user&quot;);        //2.创建查询请求体构建器        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();        //构建查询方式：高亮查询        TermsQueryBuilder termsQueryBuilder =                QueryBuilders.termsQuery(&quot;name&quot;,&quot;zhangsan&quot;);        //设置查询方式        sourceBuilder.query(termsQueryBuilder);        //构建高亮字段        HighlightBuilder highlightBuilder = new HighlightBuilder();        highlightBuilder.preTags(&quot;&lt;font color=&#39;red&#39;&gt;&quot;);//设置标签前缀        highlightBuilder.postTags(&quot;&lt;/font&gt;&quot;);//设置标签后缀        highlightBuilder.field(&quot;name&quot;);//设置高亮字段        //设置高亮构建对象        sourceBuilder.highlighter(highlightBuilder);        //设置请求体        request.source(sourceBuilder);        //3.客户端发送请求，获取响应对象        SearchResponse response = client.search(request, RequestOptions.DEFAULT);        //4.打印响应结果        SearchHits hits = response.getHits();        System.out.println(&quot;took::&quot;+response.getTook());        System.out.println(&quot;time_out::&quot;+response.isTimedOut());        System.out.println(&quot;total::&quot;+hits.getTotalHits());        System.out.println(&quot;max_score::&quot;+hits.getMaxScore());        System.out.println(&quot;hits::::&gt;&gt;&quot;);        for (SearchHit hit : hits) &#123;            String sourceAsString = hit.getSourceAsString();            System.out.println(sourceAsString);            //打印高亮结果            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();            System.out.println(highlightFields);        &#125;        System.out.println(&quot;&lt;&lt;::::&quot;);    &#125;;</code></pre><p>​<br>        public static void main(String[] args) {<br>            ConnectElasticsearch.connect(SEARCH_WITH_HIGHLIGHT);<br>        }</p><pre><code>&#125;</code></pre><p>后台打印</p><pre><code>took::672mstime_out::falsetotal::1 hitsmax_score::1.0hits::::&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;name=[name], fragments[[&lt;font color=&#39;red&#39;&gt;zhangsan&lt;/font&gt;]]&#125;&lt;&lt;::::Process finished with exit code 0</code></pre><h3 id="28-入门-JavaAPI-文档-高级查询-最大值查询-amp-分组查询"><a href="#28-入门-JavaAPI-文档-高级查询-最大值查询-amp-分组查询" class="headerlink" title="28-入门-JavaAPI-文档-高级查询-最大值查询 &amp; 分组查询"></a>28-入门-JavaAPI-文档-高级查询-最大值查询 &amp; 分组查询</h3><h4 id="最大值查询"><a href="#最大值查询" class="headerlink" title="最大值查询"></a>最大值查询</h4><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import com.lun.elasticsearch.hello.ElasticsearchTask;import org.elasticsearch.action.search.SearchRequest;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.common.unit.Fuzziness;import org.elasticsearch.index.query.BoolQueryBuilder;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.index.query.RangeQueryBuilder;import org.elasticsearch.index.query.TermsQueryBuilder;import org.elasticsearch.search.SearchHit;import org.elasticsearch.search.SearchHits;import org.elasticsearch.search.aggregations.AggregationBuilders;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;import org.elasticsearch.search.fetch.subphase.highlight.HighlightField;import org.elasticsearch.search.sort.SortOrder;import java.util.Map;public class QueryDoc &#123;    public static final ElasticsearchTask SEARCH_WITH_MAX = client -&gt; &#123;        // 高亮查询        SearchRequest request = new SearchRequest().indices(&quot;user&quot;);        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();        sourceBuilder.aggregation(AggregationBuilders.max(&quot;maxAge&quot;).field(&quot;age&quot;));        //设置请求体        request.source(sourceBuilder);        //3.客户端发送请求，获取响应对象        SearchResponse response = client.search(request, RequestOptions.DEFAULT);        //4.打印响应结果        SearchHits hits = response.getHits();        System.out.println(response);    &#125;;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(SEARCH_WITH_MAX);    &#125;&#125;</code></pre><p>后台打印</p><pre><code>&#123;&quot;took&quot;:16,&quot;timed_out&quot;:false,&quot;_shards&quot;:&#123;&quot;total&quot;:1,&quot;successful&quot;:1,&quot;skipped&quot;:0,&quot;failed&quot;:0&#125;,&quot;hits&quot;:&#123;&quot;total&quot;:&#123;&quot;value&quot;:6,&quot;relation&quot;:&quot;eq&quot;&#125;,&quot;max_score&quot;:1.0,&quot;hits&quot;:[&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1001&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1002&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1003&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1004&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1005&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1006&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;]&#125;,&quot;aggregations&quot;:&#123;&quot;max#maxAge&quot;:&#123;&quot;value&quot;:50.0&#125;&#125;&#125;Process finished with exit code 0</code></pre><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><pre><code>import com.lun.elasticsearch.hello.ConnectElasticsearch;import com.lun.elasticsearch.hello.ElasticsearchTask;import org.elasticsearch.action.search.SearchRequest;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.common.unit.Fuzziness;import org.elasticsearch.index.query.BoolQueryBuilder;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.index.query.RangeQueryBuilder;import org.elasticsearch.index.query.TermsQueryBuilder;import org.elasticsearch.search.SearchHit;import org.elasticsearch.search.SearchHits;import org.elasticsearch.search.aggregations.AggregationBuilders;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;import org.elasticsearch.search.fetch.subphase.highlight.HighlightField;import org.elasticsearch.search.sort.SortOrder;import java.util.Map;public class QueryDoc &#123;    public static final ElasticsearchTask SEARCH_WITH_GROUP = client -&gt; &#123;        SearchRequest request = new SearchRequest().indices(&quot;user&quot;);        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();        sourceBuilder.aggregation(AggregationBuilders.terms(&quot;age_groupby&quot;).field(&quot;age&quot;));        //设置请求体        request.source(sourceBuilder);        //3.客户端发送请求，获取响应对象        SearchResponse response = client.search(request, RequestOptions.DEFAULT);        //4.打印响应结果        SearchHits hits = response.getHits();        System.out.println(response);    &#125;;    public static void main(String[] args) &#123;        ConnectElasticsearch.connect(SEARCH_WITH_GROUP);    &#125;&#125;</code></pre><p>后台打印</p><pre><code>&#123;&quot;took&quot;:10,&quot;timed_out&quot;:false,&quot;_shards&quot;:&#123;&quot;total&quot;:1,&quot;successful&quot;:1,&quot;skipped&quot;:0,&quot;failed&quot;:0&#125;,&quot;hits&quot;:&#123;&quot;total&quot;:&#123;&quot;value&quot;:6,&quot;relation&quot;:&quot;eq&quot;&#125;,&quot;max_score&quot;:1.0,&quot;hits&quot;:[&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1001&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1002&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1003&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1004&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1005&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1006&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;]&#125;,&quot;aggregations&quot;:&#123;&quot;lterms#age_groupby&quot;:&#123;&quot;doc_count_error_upper_bound&quot;:0,&quot;sum_other_doc_count&quot;:0,&quot;buckets&quot;:[&#123;&quot;key&quot;:20,&quot;doc_count&quot;:2&#125;,&#123;&quot;key&quot;:10,&quot;doc_count&quot;:1&#125;,&#123;&quot;key&quot;:30,&quot;doc_count&quot;:1&#125;,&#123;&quot;key&quot;:40,&quot;doc_count&quot;:1&#125;,&#123;&quot;key&quot;:50,&quot;doc_count&quot;:1&#125;]&#125;&#125;&#125;Process finished with exit code 0</code></pre><h2 id="第3章-Elasticsearch环境"><a href="#第3章-Elasticsearch环境" class="headerlink" title="第3章 Elasticsearch环境"></a>第3章 Elasticsearch环境</h2><h3 id="29-环境-简介"><a href="#29-环境-简介" class="headerlink" title="29-环境-简介"></a>29-环境-简介</h3><h4 id="单机-amp-集群"><a href="#单机-amp-集群" class="headerlink" title="单机 &amp; 集群"></a>单机 &amp; 集群</h4><p>单台 Elasticsearch 服务器提供服务，往往都有最大的负载能力，超过这个阈值，服务器<br>性能就会大大降低甚至不可用，所以生产环境中，一般都是运行在指定服务器集群中。<br>除了负载能力，单点服务器也存在其他问题：</p><ul><li>单台机器存储容量有限</li><li>单服务器容易出现单点故障，无法实现高可用</li><li>单服务的并发处理能力有限</li></ul><p>配置服务器集群时，集群中节点数量没有限制，大于等于 2 个节点就可以看做是集群了。一<br>般出于高性能及高可用方面来考虑集群中节点数量都是 3 个以上</p><p>总之，集群能提高性能，增加容错。</p><h4 id="集群-Cluster"><a href="#集群-Cluster" class="headerlink" title="集群 Cluster"></a>集群 Cluster</h4><p><strong>一个集群就是由一个或多个服务器节点组织在一起，共同持有整个的数据，并一起提供索引和搜索功能。</strong>一个 Elasticsearch 集群有一个唯一的名字标识，这个名字默认就是”elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。</p><h4 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点 Node"></a>节点 Node</h4><p>集群中包含很多服务器， 一个节点就是其中的一个服务器。 作为集群的一部分，它存储数据，参与集群的索引和搜索功能。</p><p>一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于 Elasticsearch 集群中的哪些节点。</p><p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。</p><p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运<br>行任何 Elasticsearch 节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的<br>集群。</p><h3 id="30-环境-Windows集群部署"><a href="#30-环境-Windows集群部署" class="headerlink" title="30-环境-Windows集群部署"></a>30-环境-Windows集群部署</h3><h4 id="部署集群"><a href="#部署集群" class="headerlink" title="部署集群"></a>部署集群</h4><p>一、创建 elasticsearch-cluster 文件夹</p><p>创建 elasticsearch-7.8.0-cluster 文件夹，在内部复制三个 elasticsearch 服务。</p><p><img src="../assets/elasticsearch/bb0bb111f455c3ee28faf4ea1d200e97.png" alt=""></p><p>二、修改集群文件目录中每个节点的 config/elasticsearch.yml 配置文件</p><p><strong>node-1001 节点</strong></p><pre><code>#节点 1 的配置信息：#集群名称，节点之间要保持一致cluster.name: my-elasticsearch#节点名称，集群内要唯一node.name: node-1001node.master: truenode.data: true#ip 地址network.host: localhost#http 端口http.port: 1001#tcp 监听端口transport.tcp.port: 9301#discovery.seed_hosts: [&quot;localhost:9301&quot;, &quot;localhost:9302&quot;,&quot;localhost:9303&quot;]#discovery.zen.fd.ping_timeout: 1m#discovery.zen.fd.ping_retries: 5#集群内的可以被选为主节点的节点列表#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;,&quot;node-3&quot;]#跨域配置#action.destructive_requires_name: truehttp.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;</code></pre><p><strong>node-1002 节点</strong></p><pre><code>#节点 2 的配置信息：#集群名称，节点之间要保持一致cluster.name: my-elasticsearch#节点名称，集群内要唯一node.name: node-1002node.master: truenode.data: true#ip 地址network.host: localhost#http 端口http.port: 1002#tcp 监听端口transport.tcp.port: 9302discovery.seed_hosts: [&quot;localhost:9301&quot;]discovery.zen.fd.ping_timeout: 1mdiscovery.zen.fd.ping_retries: 5#集群内的可以被选为主节点的节点列表#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;,&quot;node-3&quot;]#跨域配置#action.destructive_requires_name: truehttp.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;</code></pre><p><strong>node-1003 节点</strong></p><pre><code>#节点 3 的配置信息：#集群名称，节点之间要保持一致cluster.name: my-elasticsearch#节点名称，集群内要唯一node.name: node-1003node.master: truenode.data: true#ip 地址network.host: localhost#http 端口http.port: 1003#tcp 监听端口transport.tcp.port: 9303#候选主节点的地址，在开启服务后可以被选为主节点discovery.seed_hosts: [&quot;localhost:9301&quot;, &quot;localhost:9302&quot;]discovery.zen.fd.ping_timeout: 1mdiscovery.zen.fd.ping_retries: 5#集群内的可以被选为主节点的节点列表#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;,&quot;node-3&quot;]#跨域配置#action.destructive_requires_name: truehttp.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;</code></pre><p>三、如果有必要，删除每个节点中的 data 目录中所有内容 。</p><h4 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h4><p>分别依次双击执行节点的bin/elasticsearch.bat, 启动节点服务器（可以编写一个脚本启动），启动后，会自动加入指定名称的集群。</p><h4 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h4><p>一、用Postman，查看集群状态</p><pre><code>1. `GET http://127.0.0.1:1001/_cluster/health`2. `GET http://127.0.0.1:1002/_cluster/health`3. `GET http://127.0.0.1:1003/_cluster/health`</code></pre><p>返回结果皆为如下：</p><pre><code>&#123;    &quot;cluster_name&quot;: &quot;my-application&quot;,    &quot;status&quot;: &quot;green&quot;,    &quot;timed_out&quot;: false,    &quot;number_of_nodes&quot;: 3,    &quot;number_of_data_nodes&quot;: 3,    &quot;active_primary_shards&quot;: 0,    &quot;active_shards&quot;: 0,    &quot;relocating_shards&quot;: 0,    &quot;initializing_shards&quot;: 0,    &quot;unassigned_shards&quot;: 0,    &quot;delayed_unassigned_shards&quot;: 0,    &quot;number_of_pending_tasks&quot;: 0,    &quot;number_of_in_flight_fetch&quot;: 0,    &quot;task_max_waiting_in_queue_millis&quot;: 0,    &quot;active_shards_percent_as_number&quot;: 100.0&#125;</code></pre><p><strong>status字段</strong> 指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：</p><pre><code>1. green：所有的主分片和副本分片都正常运行。2. yellow：所有的主分片都正常运行，但不是所有的副本分片都正常运行。3. red：有主分片没能正常运行。</code></pre><p>二、用Postman，在一节点增加索引，另一节点获取索引</p><p>向集群中的node-1001节点增加索引：</p><pre><code>#PUT http://127.0.0.1:1001/user</code></pre><p>返回结果：</p><pre><code>&#123;    &quot;acknowledged&quot;: true,    &quot;shards_acknowledged&quot;: true,    &quot;index&quot;: &quot;user&quot;&#125;</code></pre><p>向集群中的node-1003节点获取索引：</p><pre><code>#GET http://127.0.0.1:1003/user</code></pre><p>返回结果：</p><pre><code>&#123;    &quot;user&quot;: &#123;        &quot;aliases&quot;: &#123;&#125;,        &quot;mappings&quot;: &#123;&#125;,        &quot;settings&quot;: &#123;            &quot;index&quot;: &#123;                &quot;creation_date&quot;: &quot;1617993035885&quot;,                &quot;number_of_shards&quot;: &quot;1&quot;,                &quot;number_of_replicas&quot;: &quot;1&quot;,                &quot;uuid&quot;: &quot;XJKERwQlSJ6aUxZEN2EV0w&quot;,                &quot;version&quot;: &#123;                    &quot;created&quot;: &quot;7080099&quot;                &#125;,                &quot;provided_name&quot;: &quot;user&quot;            &#125;        &#125;    &#125;&#125;</code></pre><p>如果在1003创建索引，同样在1001也能获取索引信息，这就是集群能力。</p><h3 id="31-环境-Linux单节点部署"><a href="#31-环境-Linux单节点部署" class="headerlink" title="31-环境-Linux单节点部署"></a>31-环境-Linux单节点部署</h3><h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><p>一、下载软件</p><p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">下载Linux版的Elasticsearch</a></p><p>二、解压软件</p><pre><code># 解压缩tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/module# 改名mv elasticsearch-7.8.0 es</code></pre><p>三、创建用户</p><p>因为安全问题， Elasticsearch 不允许 root 用户直接运行，所以要创建新用户，在 root 用户中创建新用户。</p><pre><code>useradd es #新增 es 用户passwd es #为 es 用户设置密码userdel -r es #如果错了，可以删除再加chown -R es:es /opt/module/es #文件夹所有者</code></pre><p>四、修改配置文件</p><p>修改/opt/module/es/config/elasticsearch.yml文件。</p><pre><code># 加入如下配置cluster.name: elasticsearchnode.name: node-1network.host: 0.0.0.0http.port: 9200cluster.initial_master_nodes: [&quot;node-1&quot;]</code></pre><p>修改/etc/security/limits.conf</p><pre><code># 在文件末尾中增加下面内容# 每个进程可以打开的文件数的限制es soft nofile 65536es hard nofile 65536</code></pre><p>修改/etc/security/limits.d/20-nproc.conf</p><pre><code># 在文件末尾中增加下面内容# 每个进程可以打开的文件数的限制es soft nofile 65536es hard nofile 65536# 操作系统级别对每个用户创建的进程数的限制* hard nproc 4096# 注： * 带表 Linux 所有用户名称</code></pre><p>修改/etc/sysctl.conf</p><pre><code># 在文件中增加下面内容# 一个进程可以拥有的 VMA(虚拟内存区域)的数量,默认值为 65536vm.max_map_count=655360</code></pre><p>重新加载</p><pre><code>sysctl -p</code></pre><h4 id="启动软件"><a href="#启动软件" class="headerlink" title="启动软件"></a>启动软件</h4><p>使用 ES 用户启动</p><pre><code>cd /opt/module/es/#启动bin/elasticsearch#后台启动bin/elasticsearch -d  </code></pre><p>启动时，会动态生成文件，如果文件所属用户不匹配，会发生错误，需要重新进行修改用户和用户组</p><p><img src="../assets/elasticsearch/a1db2a83d71b7d619dd28bd1d21b6d1a.png" alt=""></p><p>关闭防火墙</p><pre><code>#暂时关闭防火墙systemctl stop firewalld#永久关闭防火墙systemctl enable firewalld.service #打开防火墙永久性生效，重启后不会复原systemctl disable firewalld.service #关闭防火墙，永久性生效，重启后不会复原</code></pre><h4 id="测试软件"><a href="#测试软件" class="headerlink" title="测试软件"></a>测试软件</h4><p>浏览器中输入地址： <a href="http://linux1:9200/">http://linux1:9200/</a></p><p><img src="../assets/elasticsearch/647a8a0494376b22002da5386eb473ac.png" alt=""></p><h3 id="32-环境-Linux集群部署"><a href="#32-环境-Linux集群部署" class="headerlink" title="32-环境-Linux集群部署"></a>32-环境-Linux集群部署</h3><h4 id="软件安装-1"><a href="#软件安装-1" class="headerlink" title="软件安装"></a>软件安装</h4><p>一、下载软件</p><p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">下载Linux版的Elasticsearch</a></p><p>二、解压软件</p><pre><code># 解压缩tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/module# 改名mv elasticsearch-7.8.0 es-cluster</code></pre><p>将软件分发到其他节点： linux2, linux3</p><p>三、创建用户</p><p>因为安全问题， Elasticsearch 不允许 root 用户直接运行，所以要创建新用户，在 root 用户中创建新用户。</p><pre><code>useradd es #新增 es 用户passwd es #为 es 用户设置密码userdel -r es #如果错了，可以删除再加chown -R es:es /opt/module/es #文件夹所有者</code></pre><p>四、修改配置文件</p><p>修改/opt/module/es/config/elasticsearch.yml 文件，分发文件。</p><pre><code># 加入如下配置#集群名称cluster.name: cluster-es#节点名称， 每个节点的名称不能重复node.name: node-1#ip 地址， 每个节点的地址不能重复network.host: linux1#是不是有资格主节点node.master: truenode.data: truehttp.port: 9200# head 插件需要这打开这两个配置http.cors.allow-origin: &quot;*&quot;http.cors.enabled: truehttp.max_content_length: 200mb#es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举 mastercluster.initial_master_nodes: [&quot;node-1&quot;]#es7.x 之后新增的配置，节点发现discovery.seed_hosts: [&quot;linux1:9300&quot;,&quot;linux2:9300&quot;,&quot;linux3:9300&quot;]gateway.recover_after_nodes: 2network.tcp.keep_alive: truenetwork.tcp.no_delay: truetransport.tcp.compress: true#集群内同时启动的数据任务个数，默认是 2 个cluster.routing.allocation.cluster_concurrent_rebalance: 16#添加或删除节点及负载均衡时并发恢复的线程个数，默认 4 个cluster.routing.allocation.node_concurrent_recoveries: 16#初始化数据恢复时，并发恢复线程的个数，默认 4 个cluster.routing.allocation.node_initial_primaries_recoveries: 16</code></pre><p>修改/etc/security/limits.conf ，分发文件</p><pre><code># 在文件末尾中增加下面内容es soft nofile 65536es hard nofile 65536</code></pre><p>修改/etc/security/limits.d/20-nproc.conf，分发文件</p><pre><code># 在文件末尾中增加下面内容es soft nofile 65536es hard nofile 65536\* hard nproc 4096\# 注： * 带表 Linux 所有用户名称</code></pre><p>修改/etc/sysctl.conf</p><pre><code># 在文件中增加下面内容vm.max_map_count=655360</code></pre><p>重新加载</p><pre><code>sysctl -p</code></pre><h4 id="启动软件-1"><a href="#启动软件-1" class="headerlink" title="启动软件"></a>启动软件</h4><p>分别在不同节点上启动 ES 软件</p><pre><code>cd /opt/module/es-cluster#启动bin/elasticsearch#后台启动bin/elasticsearch -d</code></pre><h4 id="测试集群-1"><a href="#测试集群-1" class="headerlink" title="测试集群"></a>测试集群</h4><p><img src="../assets/elasticsearch/73ba4fe5821e2c9d98ff8d16221e5fe8.png" alt=""></p><h2 id="第4章-Elasticsearch进阶"><a href="#第4章-Elasticsearch进阶" class="headerlink" title="第4章 Elasticsearch进阶"></a>第4章 Elasticsearch进阶</h2><h3 id="33-进阶-核心概念"><a href="#33-进阶-核心概念" class="headerlink" title="33-进阶-核心概念"></a>33-进阶-核心概念</h3><p><img src="../assets/elasticsearch/fb2d75748469e8880f85ff9825557db4.png" alt=""></p><h4 id="索引Index"><a href="#索引Index" class="headerlink" title="索引Index"></a>索引Index</h4><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除（CRUD）的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。</p><p>能搜索的数据必须索引，这样的好处是可以提高查询速度，比如：新华字典前面的目录就是索引的意思，目录可以提高查询速度。</p><p><strong>Elasticsearch 索引的精髓：一切设计都是为了提高搜索的性能。</strong></p><h4 id="类型Type"><a href="#类型Type" class="headerlink" title="类型Type"></a>类型Type</h4><p>在一个索引中，你可以定义一种或多种类型。</p><p>一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来定。通常，会为具<br>有一组共同字段的文档定义一个类型。不同的版本，类型发生了不同的变化。</p><div class="table-container"><table><thead><tr><th>版本</th><th>Type</th></tr></thead><tbody><tr><td>5.x</td><td>支持多种 type</td></tr><tr><td>6.x</td><td>只能有一种 type</td></tr><tr><td>7.x</td><td>默认不再支持自定义索引类型（默认类型为： _doc）</td></tr></tbody></table></div><h4 id="文档Document"><a href="#文档Document" class="headerlink" title="文档Document"></a>文档Document</h4><p>一个文档是一个可被索引的基础信息单元，也就是一条数据。</p><p>比如：你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以 JSON（Javascript Object Notation）格式来表示，而 JSON 是一个到处存在的互联网数据交互格式。</p><p>在一个 index/type 里面，你可以存储任意多的文档。</p><h4 id="字段Field"><a href="#字段Field" class="headerlink" title="字段Field"></a>字段Field</h4><p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识。</p><h4 id="映射Mapping"><a href="#映射Mapping" class="headerlink" title="映射Mapping"></a>映射Mapping</h4><p>mapping 是处理数据的方式和规则方面做一些限制，如：某个字段的数据类型、默认值、分析器、是否被索引等等。这些都是映射里面可以设置的，其它就是处理 ES 里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。</p><h4 id="分片Shards"><a href="#分片Shards" class="headerlink" title="分片Shards"></a>分片Shards</h4><p>一个索引可以存储超出单个节点硬件限制的大量数据。比如，一个具有 10 亿文档数据<br>的索引占据 1TB 的磁盘空间，而任一节点都可能没有这样大的磁盘空间。 或者单个节点处理搜索请求，响应太慢。为了解决这个问题，<strong>Elasticsearch 提供了将索引划分成多份的能力，每一份就称之为分片。</strong>当你创建一个索引的时候，你可以指定你想要的分片的数量。 <strong>每个分片本身也是一个功能完善并且独立的“索引”</strong> ，这个“索引”可以被放置到集群中的任何节点上。</p><p>分片很重要，主要有两方面的原因：</p><pre><code>1. 允许你水平分割 / 扩展你的内容容量。2. 允许你在分片之上进行分布式的、并行的操作，进而提高性能/吞吐量。</code></pre><p>至于一个分片怎样分布，它的文档怎样聚合和搜索请求，是完全由 Elasticsearch 管理的，对于作为用户的你来说，这些都是透明的，无需过分关心。</p><p>被混淆的概念是，一个 Lucene 索引 我们在 Elasticsearch 称作 分片 。 一个Elasticsearch 索引 是分片的集合。 当 Elasticsearch 在索引中搜索的时候， 他发送查询到每一个属于索引的分片（Lucene 索引），然后合并每个分片的结果到一个全局的结果集。</p><p>Lucene 是 Apache 软件基金会 Jakarta 项目组的一个子项目，提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在 Java 开发环境里 Lucene 是一个成熟的免费开源工具。就其本身而言， Lucene 是当前以及最近几年最受欢迎的免费 Java 信息检索程序库。但 Lucene 只是一个提供全文搜索功能类库的核心工具包，而真正使用它还需要一个完善的服务框架搭建起来进行应用。</p><p>目前市面上流行的搜索引擎软件，主流的就两款： Elasticsearch 和 Solr,这两款都是基于 Lucene 搭建的，可以独立部署启动的搜索引擎服务软件。由于内核相同，所以两者除了服务器安装、部署、管理、集群以外，对于数据的操作 修改、添加、保存、查询等等都十分类似。</p><h4 id="副本Replicas"><a href="#副本Replicas" class="headerlink" title="副本Replicas"></a>副本Replicas</h4><p>在一个网络 / 云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于<br>离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的， Elasticsearch 允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片(副本)。</p><p>复制分片之所以重要，有两个主要原因：</p><ul><li>在分片/节点失败的情况下， <strong>提供了高可用性</strong> 。因为这个原因，注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的。</li><li>扩展你的搜索量/吞吐量，因为搜索可以在所有的副本上并行运行。</li></ul><p>总之，每个索引可以被分成多个分片。一个索引也可以被复制 0 次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。</p><p>分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。</p><p>默认情况下，Elasticsearch 中的每个索引被分片 1 个主分片和 1 个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有 1 个主分片和另外 1 个复制分片（1 个完全拷贝），这样的话每个索引总共就有 2 个分片， 我们需要根据索引需要确定分片个数。</p><h4 id="分配Allocation"><a href="#分配Allocation" class="headerlink" title="分配Allocation"></a>分配Allocation</h4><p>将分片分配给某个节点的过程，包括分配主分片或者副本。如果是副本，还包含从主分片复制数据的过程。这个过程是由 master 节点完成的。</p><h3 id="34-进阶-系统架构-简介"><a href="#34-进阶-系统架构-简介" class="headerlink" title="34-进阶-系统架构-简介"></a>34-进阶-系统架构-简介</h3><p><img src="../assets/elasticsearch/06e709a9e2dafdd29d09f42d17b98aaf.png" alt=""></p><p>一个运行中的 Elasticsearch 实例称为一个节点，而集群是由一个或者多个拥有相同<br>cluster.name 配置的节点组成， 它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。</p><p>当一个节点被选举成为主节点时， 它将负责管理集群范围内的所有变更，例如增加、<br>删除索引，或者增加、删除节点等。 而主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。 任何节点都可以成为主节点。我们的示例集群就只有一个节点，所以它同时也成为了主节点。</p><p>作为用户，我们可以将请求发送到集群中的任何节点 ，包括主节点。 每个节点都知道<br>任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。 无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。 Elasticsearch 对这一切的管理都是透明的。</p><h3 id="35-进阶-单节点集群"><a href="#35-进阶-单节点集群" class="headerlink" title="35-进阶-单节点集群"></a>35-进阶-单节点集群</h3><p>我们在包含一个空节点的集群内创建名为 users 的索引，为了演示目的，我们将分配 3个主分片和一份副本（每个主分片拥有一个副本分片）。</p><pre><code>#PUT http://127.0.0.1:1001/users&#123;    &quot;settings&quot; : &#123;        &quot;number_of_shards&quot; : 3,        &quot;number_of_replicas&quot; : 1    &#125;&#125;</code></pre><p>集群现在是拥有一个索引的单节点集群。所有 3 个主分片都被分配在 node-1 。</p><p><img src="../assets/elasticsearch/42c19d9cfde517cdf576933e3d9e8f4a.png" alt=""></p><p>通过 elasticsearch-head 插件（一个Chrome插件）查看集群情况 。</p><p><img src="../assets/elasticsearch/50645290d5a783985dbce090237ec21b.png" alt=""></p><ul><li>集群健康值:yellow( 3 of 6 )：表示当前集群的全部主分片都正常运行，但是副本分片没有全部处在正常状态。</li><li><img src="../assets/elasticsearch/376296c37deb618bdc96e407d583650d.png" alt="">：3 个主分片正常。</li><li><img src="../assets/elasticsearch/70f6cbd3921827ecebd62a58540c4c21.png" alt="">：3 个副本分片都是 Unassigned，它们都没有被分配到任何节点。 在同 一个节点上既保存原始数据又保存副本是没有意义的，因为一旦失去了那个节点，我们也将丢失该节点 上的所有副本数据。</li></ul><p>当前集群是正常运行的，但存在丢失数据的风险。</p><hr><p><strong>elasticsearch-head chrome插件安装</strong></p><p><a href="https://github.com/mobz/elasticsearch-head">插件获取网址</a>，下载压缩包，解压后将内容放入自定义命名为elasticsearch-head文件夹。</p><p>接着点击Chrome右上角选项-&gt;工具-&gt;管理扩展（或则地址栏输入chrome://extensions/），选择打开“开发者模式”，让后点击“加载已解压得扩展程序”，选择elasticsearch-head/_site，即可完成chrome插件安装。</p><h3 id="36-进阶-故障转移"><a href="#36-进阶-故障转移" class="headerlink" title="36-进阶-故障转移"></a>36-进阶-故障转移</h3><p>当集群中只有一个节点在运行时，意味着会有一个单点故障问题——没有冗余。 幸运的是，我们只需再启动一个节点即可防止数据丢失。当你在同一台机器上启动了第二个节点时，只要它和第一个节点有同样的 cluster.name 配置，它就会自动发现集群并加入到其中。但是在不同机器上启动节点的时候，为了加入到同一集群，你需要配置一个可连接到的单播主机列表。之所以配置为使用单播发现，以防止节点无意中加入集群。只有在同一台机器上<br>运行的节点才会自动组成集群。</p><p>如果启动了第二个节点，集群将会拥有两个节点 : 所有主分片和副本分片都已被分配 。</p><p><img src="../assets/elasticsearch/85b977e5c116d8851c56cb4a46e78c44.png" alt=""></p><p>通过 elasticsearch-head 插件查看集群情况</p><p><img src="../assets/elasticsearch/c13e253f5e48acad777bb7c0783fea9f.png" alt=""></p><ul><li>集群健康值:green( 3 of 6 )：表示所有 6 个分片（包括 3 个主分片和 3 个副本分片）都在正常运行。</li><li><img src="../assets/elasticsearch/376296c37deb618bdc96e407d583650d.png" alt="">：3 个主分片正常。</li><li><img src="../assets/elasticsearch/376296c37deb618bdc96e407d583650d.png" alt="">：第二个节点加入到集群后， 3 个副本分片将会分配到这个节点上——每 个主分片对应一个副本分片。这意味着当集群内任何一个节点出现问题时，我们的数据都完好无损。所 有新近被索引的文档都将会保存在主分片上，然后被并行的复制到对应的副本分片上。这就保证了我们 既可以从主分片又可以从副本分片上获得文档。</li></ul><h3 id="37-进阶-水平扩容"><a href="#37-进阶-水平扩容" class="headerlink" title="37-进阶-水平扩容"></a>37-进阶-水平扩容</h3><p>怎样为我们的正在增长中的应用程序按需扩容呢？当启动了第三个节点，我们的集群将会拥有三个节点的集群 : 为了分散负载而对分片进行重新分配 。</p><p><img src="../assets/elasticsearch/f780e2f8b277df6834883ba1098b0145.png" alt=""></p><p>通过 elasticsearch-head 插件查看集群情况。</p><p><img src="../assets/elasticsearch/70515723bc8dad6e692a1e6cd48b0271.png" alt=""></p><ul><li>集群健康值:green( 3 of 6 )：表示所有 6 个分片（包括 3 个主分片和 3 个副本分片）都在正常运行。</li><li><img src="../assets/elasticsearch/1f1c8a251e580654d7d16b24287020f6.png" alt="">Node 1 和 Node 2 上各有一个分片被迁移到了新的 Node 3 节点，现在每个节点上都拥有 2 个分片， 而不是之前的 3 个。 这表示每个节点的硬件资源（CPU, RAM, I/O)将被更少的分片所共享，每个分片 的性能将会得到提升。</li></ul><p>分片是一个功能完整的搜索引擎，它拥有使用一个节点上的所有资源的能力。 我们这个拥有 6 个分 片（3 个主分片和 3 个副本分片）的索引可以最大扩容到 6 个节点，每个节点上存在一个分片，并且每个 分片拥有所在节点的全部资源。</p><p><strong>但是如果我们想要扩容超过 6 个节点怎么办呢？</strong></p><p>主分片的数目在索引创建时就已经确定了下来。实际上，这个数目定义了这个索引能够<br>存储 的最大数据量。（实际大小取决于你的数据、硬件和使用场景。） 但是，读操作——<br>搜索和返回数据——可以同时被主分片 或 副本分片所处理，所以当你拥有越多的副本分片<br>时，也将拥有越高的吞吐量。</p><p>在运行中的集群上是可以动态调整副本分片数目的，我们可以按需伸缩集群。让我们把<br>副本数从默认的 1 增加到 2。</p><pre><code>#PUT http://127.0.0.1:1001/users/_settings&#123;    &quot;number_of_replicas&quot; : 2&#125;</code></pre><p>users 索引现在拥有 9 个分片： 3 个主分片和 6 个副本分片。 这意味着我们可以将集群<br>扩容到 9 个节点，每个节点上一个分片。相比原来 3 个节点时，集群搜索性能可以提升 3 倍。</p><p><img src="../assets/elasticsearch/480452b5569d6728896e449123a90771.png" alt=""></p><p>通过 elasticsearch-head 插件查看集群情况：</p><p><img src="../assets/elasticsearch/d4f049926a603486dada7e4fb8b8d6b7.png" alt=""></p><p>当然，如果只是在相同节点数目的集群上增加更多的副本分片并不能提高性能，因为每<br>个分片从节点上获得的资源会变少。 你需要增加更多的硬件资源来提升吞吐量。</p><p>但是更多的副本分片数提高了数据冗余量：按照上面的节点配置，我们可以在失去 2 个节点<br>的情况下不丢失任何数据。</p><h3 id="38-进阶-应对故障"><a href="#38-进阶-应对故障" class="headerlink" title="38-进阶-应对故障"></a>38-进阶-应对故障</h3><p>我们关闭第一个节点，这时集群的状态为:关闭了一个节点后的集群。</p><p><img src="../assets/elasticsearch/f7bb8a49a554ecc03416a0c7d1da5168.png" alt=""></p><p>我们关闭的节点是一个主节点。而集群必须拥有一个主节点来保证正常工作，所以发生<br>的第一件事情就是选举一个新的主节点： Node 2 。在我们关闭 Node 1 的同时也失去了主<br>分片 1 和 2 ，并且在缺失主分片的时候索引也不能正常工作。 如果此时来检查集群的状况，我们看到的状态将会为 red ：不是所有主分片都在正常工作。</p><p>幸运的是，在其它节点上存在着这两个主分片的完整副本， 所以新的主节点立即将这些分片在 Node 2 和 Node 3 上对应的副本分片提升为主分片， 此时集群的状态将会为yellow。这个提升主分片的过程是瞬间发生的，如同按下一个开关一般。</p><p><img src="../assets/elasticsearch/e0b2904f7716f05d6bb2121599985e58.png" alt=""></p><p><strong>为什么我们集群状态是 yellow 而不是 green 呢？</strong></p><p>虽然我们拥有所有的三个主分片，但是同时设置了每个主分片需要对应 2 份副本分片，而此<br>时只存在一份副本分片。 所以集群不能为 green 的状态，不过我们不必过于担心：如果我<br>们同样关闭了 Node 2 ，我们的程序 依然 可以保持在不丢任何数据的情况下运行，因为<br>Node 3 为每一个分片都保留着一份副本。</p><p>如果想回复原来的样子，要确保Node-1的配置文件有如下配置：</p><pre><code>discovery.seed_hosts: [&quot;localhost:9302&quot;, &quot;localhost:9303&quot;]</code></pre><p>集群可以将缺失的副本分片再次进行分配，那么集群的状态也将恢复成之前的状态。 如果 Node 1 依然拥有着之前的分片，它将尝试去重用它们，同时仅从主分片复制发生了修改的数据文件。和之前的集群相比，只是 Master 节点切换了。</p><p><img src="../assets/elasticsearch/515e8e655f3b7202eac3b2d4ab207e87.png" alt=""></p><h3 id="39-进阶-路由计算-amp-分片控制"><a href="#39-进阶-路由计算-amp-分片控制" class="headerlink" title="39-进阶-路由计算 &amp; 分片控制"></a>39-进阶-路由计算 &amp; 分片控制</h3><h4 id="路由计算"><a href="#路由计算" class="headerlink" title="路由计算"></a>路由计算</h4><p>当索引一个文档的时候，文档会被存储到一个主分片中。 Elasticsearch 如何知道一个<br>文档应该存放到哪个分片中呢？当我们创建文档时，它如何决定这个文档应当被存储在分片 1 还是分片 2 中呢？首先这肯定不会是随机的，否则将来要获取文档的时候我们就不知道从何处寻找了。实际上，这个过程是根据下面这个公式决定的：</p><pre><code>shard = hash(routing) % number_of_primary_shards</code></pre><p>routing 是一个可变值，默认是文档的 _id ，也可以设置成一个自定义的值。 routing 通过hash 函数生成一个数字，然后这个数字再除以 number_of_primary_shards （主分片的数量）后得到余数 。这个分布在 0 到 number_of_primary_shards-1 之间的余数，就是我们所寻求的文档所在分片的位置。</p><p><img src="../assets/elasticsearch/efac1343b2f67583b0dc4ab1f4723aa1.png" alt=""></p><p>这就解释了为什么我们要在创建索引的时候就确定好主分片的数量并且永远不会改变这个数量:因为如果数量变化了，那么所有之前路由的值都会无效，文档也再也找不到了。</p><p>所有的文档API ( get . index . delete 、 bulk , update以及 mget ）都接受一个叫做routing 的路由参数，通过这个参数我们可以自定义文档到分片的映射。一个自定义的路由参数可以用来确保所有相关的文档—一例如所有属于同一个用户的文档——都被存储到同一个分片中。</p><h4 id="分片控制"><a href="#分片控制" class="headerlink" title="分片控制"></a>分片控制</h4><p>我们可以发送请求到集群中的任一节点。每个节点都有能力处理任意请求。每个节点都知道集群中任一文档位置，所以可以直接将请求转发到需要的节点上。在下面的例子中，如果将所有的请求发送到Node 1001，我们将其称为协调节点 <strong>coordinating node</strong> 。</p><p><img src="../assets/elasticsearch/6621b76b7ab5fc48608d4220d8dd6524.png" alt=""></p><p>当发送请求的时候， 为了扩展负载，更好的做法是轮询集群中所有的节点。</p><h3 id="40-进阶-数据写流程"><a href="#40-进阶-数据写流程" class="headerlink" title="40-进阶-数据写流程"></a>40-进阶-数据写流程</h3><p>新建、索引和删除请求都是写操作， 必须在主分片上面完成之后才能被复制到相关的副本分片。</p><p><img src="../assets/elasticsearch/f7d714e2ba957a44198c500ccf167965.png" alt=""></p><p>在客户端收到成功响应时，文档变更已经在主分片和所有副本分片执行完成，变更是安全的。有一些可选的 <strong>请求参数</strong> 允许您影响这个过程，可能以数据安全为代价提升性能。这些选项很少使用，因为 Elasticsearch 已经很快，但是为了完整起见， 请参考下文：</p><pre><code>1. consistency</code></pre><ul><li>即一致性。在默认设置下，即使仅仅是在试图执行一个写操作之前，主分片都会要求必须要有规定数量quorum（或者换种说法，也即必须要有大多数）的分片副本处于活跃可用状态，才会去执行写操作（其中分片副本 可以是主分片或者副本分片）。这是为了避免在发生网络分区故障（network partition）的时候进行写操作，进而导致数据不一致。 规定数量即： <strong>int((primary + number_of_replicas) / 2 ) + 1</strong></li><li>consistency 参数的值可以设为： <ul><li>one ：只要主分片状态 ok 就允许执行写操作。</li><li>all：必须要主分片和所有副本分片的状态没问题才允许执行写操作。</li><li>quorum：默认值为quorum , 即大多数的分片副本状态没问题就允许执行写操作。</li></ul></li><li><p>注意，规定数量的计算公式中number_of_replicas指的是在索引设置中的设定副本分片数，而不是指当前处理活动状态的副本分片数。如果你的索引设置中指定了当前索引拥有3个副本分片，那规定数量的计算结果即： <strong>int((1 primary + 3 replicas) / 2) + 1 = 3</strong> ，如果此时你只启动两个节点，那么处于活跃状态的分片副本数量就达不到规定数量，也因此您将无法索引和删除任何文档。</p><ol><li>timeout </li></ol><ul><li>如果没有足够的副本分片会发生什么？Elasticsearch 会等待，希望更多的分片出现。默认情况下，它最多等待 1 分钟。 如果你需要，你可以使用timeout参数使它更早终止：100是100 毫秒，30s是30秒。</li></ul></li></ul><p>新索引默认有1个副本分片，这意味着为满足规定数量应该需要两个活动的分片副本。 但是，这些默认的设置会阻止我们在单一节点上做任何事情。为了避免这个问题，要求只有当number_of_replicas 大于1的时候，规定数量才会执行。</p><h3 id="41-进阶-数据读流程"><a href="#41-进阶-数据读流程" class="headerlink" title="41-进阶-数据读流程"></a>41-进阶-数据读流程</h3><p><img src="../assets/elasticsearch/23324729d68b2393ee4c97714271a179.png" alt=""></p><p>在处理读取请求时，协调结点在每次请求的时候都会通过轮询所有的副本分片来达到负载均衡。在文档被检索时，已经被索引的文档可能已经存在于主分片上但是还没有复制到副本分片。 在这种情况下，副本分片可能会报告文档不存在，但是主分片可能成功返回文档。 一旦索引请求成功返回给用户，文档在主分片和副本分片都是可用的。</p><h3 id="42-进阶-更新流程-amp-批量操作流程"><a href="#42-进阶-更新流程-amp-批量操作流程" class="headerlink" title="42-进阶-更新流程 &amp; 批量操作流程"></a>42-进阶-更新流程 &amp; 批量操作流程</h3><h4 id="更新流程"><a href="#更新流程" class="headerlink" title="更新流程"></a>更新流程</h4><p>部分更新一个文档结合了先前说明的读取和写入流程：</p><p><img src="../assets/elasticsearch/cf2eee0f85ea866d6618160407dfa770.png" alt=""></p><p>部分更新一个文档的步骤如下：</p><pre><code>1. 客户端向Node 1发送更新请求。2. 它将请求转发到主分片所在的Node 3 。3. Node 3从主分片检索文档，修改_source字段中的JSON，并且尝试重新索引主分片的文档。如果文档已经被另一个进程修改,它会重试步骤3 ,超过retry_on_conflict次后放弃。4. 如果 Node 3成功地更新文档，它将新版本的文档并行转发到Node 1和 Node 2上的副本分片，重新建立索引。一旦所有副本分片都返回成功，Node 3向协调节点也返回成功，协调节点向客户端返回成功。</code></pre><p>当主分片把更改转发到副本分片时， 它不会转发更新请求。 相反，它转发完整文档的新版本。请记住，这些更改将会异步转发到副本分片，并且不能保证它们以发送它们相同的顺序到达。 如果 Elasticsearch 仅转发更改请求，则可能以错误的顺序应用更改，导致得到损坏的文档。</p><h4 id="批量操作流程"><a href="#批量操作流程" class="headerlink" title="批量操作流程"></a>批量操作流程</h4><p><strong>mget和 bulk API的模式类似于单文档模式。</strong>区别在于协调节点知道每个文档存在于哪个分片中。它将整个多文档请求分解成每个分片的多文档请求，并且将这些请求并行转发到每个参与节点。</p><p>协调节点一旦收到来自每个节点的应答，就将每个节点的响应收集整理成单个响应，返回给客户端。</p><p><img src="../assets/elasticsearch/aa0dcfc87f52e03718bf040955737131.png" alt=""></p><p><strong>用单个 mget 请求取回多个文档所需的步骤顺序:</strong></p><pre><code>1. 客户端向 Node 1 发送 mget 请求。2. Node 1为每个分片构建多文档获取请求，然后并行转发这些请求到托管在每个所需的主分片或者副本分片的节点上。一旦收到所有答复，Node 1 构建响应并将其返回给客户端。</code></pre><p>可以对docs数组中每个文档设置routing参数。</p><p>bulk API， 允许在单个批量请求中执行多个创建、索引、删除和更新请求。</p><p><img src="../assets/elasticsearch/daa9804f8e3e925a79648722ce865458.png" alt=""></p><p><strong>bulk API 按如下步骤顺序执行：</strong></p><pre><code>1. 客户端向Node 1 发送 bulk请求。2. Node 1为每个节点创建一个批量请求，并将这些请求并行转发到每个包含主分片的节点主机。3. 主分片一个接一个按顺序执行每个操作。当每个操作成功时,主分片并行转发新文档（或删除）到副本分片，然后执行下一个操作。一旦所有的副本分片报告所有操作成功，该节点将向协调节点报告成功，协调节点将这些响应收集整理并返回给客户端。</code></pre><h3 id="43-进阶-倒排索引"><a href="#43-进阶-倒排索引" class="headerlink" title="43-进阶-倒排索引"></a>43-进阶-倒排索引</h3><p>分片是Elasticsearch最小的工作单元。但是究竟什么是一个分片，它是如何工作的？</p><p>传统的数据库每个字段存储单个值，但这对全文检索并不够。文本字段中的每个单词需要被搜索，对数据库意味着需要单个字段有索引多值的能力。最好的支持是一个字段多个值需求的数据结构是 <strong>倒排索引</strong> 。</p><h4 id="倒排索引原理"><a href="#倒排索引原理" class="headerlink" title="倒排索引原理"></a>倒排索引原理</h4><p>Elasticsearch使用一种称为倒排索引的结构，它适用于快速的全文搜索。</p><p>见其名，知其意，有倒排索引，肯定会对应有正向索引。正向索引（forward index），反向索引（inverted index）更熟悉的名字是 <strong>倒排索引</strong> 。</p><p>所谓的 <strong>正向索引</strong> ，就是搜索引擎会将待搜索的文件都对应一个文件ID，搜索时将这个ID和搜索关键字进行对应，形成K-V对，然后对关键字进行统计计数。（统计？？下文有解释）</p><p><img src="../assets/elasticsearch/c2671e403ce2a34fa970eed855c24dcc.png" alt=""></p><p>但是互联网上收录在搜索引擎中的文档的数目是个天文数字，这样的索引结构根本无法满足实时返回排名结果的要求。所以，搜索引擎会将正向索引重新构建为倒排索引，即把文件ID对应到关键词的映射转换为关键词到文件ID的映射，每个关键词都对应着一系列的文件，这些文件中都出现这个关键词。</p><p><img src="../assets/elasticsearch/e40b13dd2bfd4b94e4582c3e61e71219.png" alt=""></p><h4 id="倒排索引的例子"><a href="#倒排索引的例子" class="headerlink" title="倒排索引的例子"></a>倒排索引的例子</h4><p>一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的文档列表。例如，假设我们有两个文档，每个文档的content域包含如下内容：</p><ul><li>The quick brown fox jumped over the lazy dog</li><li>Quick brown foxes leap over lazy dogs in summer</li></ul><p>为了创建倒排索引，我们首先将每个文档的content域拆分成单独的词（我们称它为词条或tokens )，创建一个包含所有不重复词条的排序列表，然后列出每个词条出现在哪个文档。结果如下所示：</p><p><img src="../assets/elasticsearch/455abdefd189d57bea9b04624299e98f.png" alt=""></p><p>现在，如果我们想搜索 <code>quick</code> <code>brown</code> ，我们只需要查找包含每个词条的文档：</p><p><img src="../assets/elasticsearch/3b20be22f6157bfc885066c444cbcf43.png" alt=""></p><p>两个文档都匹配，但是第一个文档比第二个匹配度更高。如果我们使用仅计算匹配词条数量的简单相似性算法，那么我们可以说，对于我们查询的相关性来讲，第一个文档比第二个文档更佳。</p><p>但是，我们目前的倒排索引有一些问题：</p><ul><li><p><code>Quick</code>和<code>quick</code>以独立的词条出现，然而用户可能认为它们是相同的词。</p></li><li><p><code>fox</code>和<code>foxes</code>非常相似，就像<code>dog</code>和<code>dogs</code>；他们有相同的词根。</p></li><li><p><code>jumped</code>和<code>leap</code>，尽管没有相同的词根，但他们的意思很相近。他们是同义词。</p></li></ul><p>使用前面的索引搜索<code>+Quick</code> <code>+fox</code>不会得到任何匹配文档。(记住，＋前缀表明这个词必须存在）。</p><p>只有同时出现<code>Quick</code>和<code>fox</code> 的文档才满足这个查询条件，但是第一个文档包含<code>quick</code> <code>fox</code> ，第二个文档包含<code>Quick</code> <code>foxes</code> 。</p><p>我们的用户可以合理的期望两个文档与查询匹配。我们可以做的更好。</p><p>如果我们将词条规范为标准模式，那么我们可以找到与用户搜索的词条不完全一致，但具有足够相关性的文档。例如：</p><ul><li><code>Quick</code>可以小写化为<code>quick</code>。</li><li><code>foxes</code>可以词干提取变为词根的格式为<code>fox</code>。类似的，<code>dogs</code>可以为提取为<code>dog</code>。</li><li><code>jumped</code>和<code>leap</code>是同义词，可以索引为相同的单词<code>jump</code> 。</li></ul><p>现在索引看上去像这样：</p><p><img src="../assets/elasticsearch/0ad8f1859d570282118f9a807d03c3e5.png" alt=""></p><p>这还远远不够。我们搜索<code>+Quick</code> <code>+fox</code> 仍然会失败，因为在我们的索引中，已经没有<code>Quick</code>了。但是，如果我们对搜索的字符串使用与content域相同的标准化规则，会变成查询<code>+quick</code> <code>+fox</code>，这样两个文档都会匹配！分词和标准化的过程称为 <strong>分析</strong> ，这非常重要。你只能搜索在索引中出现的词条，所以索引文本和查询字符串必须标准化为相同的格式。</p><h3 id="44-进阶-文档搜索"><a href="#44-进阶-文档搜索" class="headerlink" title="44-进阶-文档搜索"></a>44-进阶-文档搜索</h3><h4 id="不可改变的倒排索引"><a href="#不可改变的倒排索引" class="headerlink" title="不可改变的倒排索引"></a>不可改变的倒排索引</h4><p>早期的全文检索会为整个文档集合建立一个很大的倒排索引并将其写入到磁盘。 一旦新的索引就绪，旧的就会被其替换，这样最近的变化便可以被检索到。</p><p>倒排索引被写入磁盘后是不可改变的：它永远不会修改。</p><ul><li><p>不需要锁。如果你从来不更新索引，你就不需要担心多进程同时修改数据的问题。</p></li><li><p>一旦索引被读入内核的文件系统缓存，便会留在哪里，由于其不变性。只要文件系统缓存中还有足够的空间，那么大部分读请求会直接请求内存，而不会命中磁盘。这提供了很大的性能提升。</p></li><li><p>其它缓存(像filter缓存)，在索引的生命周期内始终有效。它们不需要在每次数据改变时被重建，因为数据不会变化。</p></li><li><p>写入单个大的倒排索引允许数据被压缩，减少磁盘IO和需要被缓存到内存的索引的使用量。</p></li></ul><p>当然，一个不变的索引也有不好的地方。主要事实是它是不可变的! 你不能修改它。如果你需要让一个新的文档可被搜索，你需要重建整个索引。这要么对一个索引所能包含的数据量造成了很大的限制，要么对索引可被更新的频率造成了很大的限制。</p><h4 id="动态更新索引"><a href="#动态更新索引" class="headerlink" title="动态更新索引"></a>动态更新索引</h4><p>如何在保留不变性的前提下实现倒排索引的更新？</p><p>答案是：用更多的索引。通过增加新的补充索引来反映新近的修改，而不是直接重写整个倒排索引。每一个倒排索引都会被轮流查询到,从最早的开始查询完后再对结果进行合并。</p><p>Elasticsearch基于Lucene，这个java库引入了 <strong>按段搜索</strong> 的概念。每一段本身都是一个倒排索引，但索引在 Lucene 中除表示所有段的集合外，还增加了提交点的概念—一个列出了所有已知段的文件。</p><p><img src="../assets/elasticsearch/80bad62f2ac013c4163e56efd9db67a0.png" alt=""></p><p>按段搜索会以如下流程执行：</p><p>一、新文档被收集到内存索引缓存。</p><p><img src="../assets/elasticsearch/59cdb15678e5dda127ee9bb52735ea0b.png" alt=""></p><p>二、不时地, 缓存被提交。</p><pre><code>1. 一个新的段，一个追加的倒排索引，被写入磁盘。2. 一个新的包含新段名字的提交点被写入磁盘。3. 磁盘进行同步，所有在文件系统缓存中等待的写入都刷新到磁盘，以确保它们被写入物理文件</code></pre><p>三、新的段被开启，让它包含的文档可见以被搜索。</p><p>四、内存缓存被清空，等待接收新的文档。</p><p><img src="../assets/elasticsearch/f439f014142e02f660b4983b9ae8e87c.png" alt=""></p><p>当一个查询被触发，所有已知的段按顺序被查询。词项统计会对所有段的结果进行聚合，以保证每个词和每个文档的关联都被准确计算。这种方式可以用相对较低的成本将新文档添加到索引。</p><p>段是不可改变的，所以既不能从把文档从旧的段中移除，也不能修改旧的段来进行反映文档的更新。取而代之的是，每个提交点会包含一个.del 文件，文件中会列出这些被删除文档的段信息。</p><p>当一个<strong>文档被“删除”</strong>时，它实际上只是在 .del 文件中被标记删除。一个被标记删除的文档仍然可以被查询匹配到，但它会在最终结果被返回前从结果集中移除。</p><p><strong>文档更新</strong> 也是类似的操作方式:当一个文档被更新时，旧版本文档被标记删除，文档的新版本被索引到一个新的段中。可能两个版本的文档都会被一个查询匹配到，但被删除的那个旧版本文档在结果集返回前就已经被移除。</p><h3 id="45-进阶-文档刷新-amp-文档刷写-amp-文档合并"><a href="#45-进阶-文档刷新-amp-文档刷写-amp-文档合并" class="headerlink" title="45-进阶-文档刷新 &amp; 文档刷写 &amp; 文档合并"></a>45-进阶-文档刷新 &amp; 文档刷写 &amp; 文档合并</h3><p><img src="../assets/elasticsearch/283c27e9a163cbc50790ce57d6d4d0af.png" alt=""></p><p><img src="../assets/elasticsearch/d56e43702d341e823299dc9c520811e5.png" alt=""></p><h4 id="近实时搜索"><a href="#近实时搜索" class="headerlink" title="近实时搜索"></a>近实时搜索</h4><p>随着按段（per-segment）搜索的发展，一个新的文档从索引到可被搜索的延迟显著降低了。新文档在几分钟之内即可被检索，但这样还是不够快。磁盘在这里成为了瓶颈。 <strong>提交（Commiting）一个新的段到磁盘需要一个fsync来确保段被物理性地写入磁盘</strong> ，这样在断电的时候就不会丢失数据。但是fsync操作代价很大；如果每次索引一个文档都去执行一次的话会造成很大的性能问题。</p><p>我们需要的是一个更轻量的方式来使一个文档可被搜索，这意味着fsync要从整个过程中被移除。在Elasticsearch和磁盘之间是 <strong>文件系统缓存</strong> 。像之前描述的一样，在内存索引缓冲区中的文档会被写入到一个新的段中。但是这里新段会被先写入到文件系统缓存—这一步代价会比较低，稍后再被刷新到磁盘—这一步代价比较高。不过只要文件已经在缓存中，就可以像其它文件一样被打开和读取了。</p><p><img src="../assets/elasticsearch/d655f874e83aabe687402f8a59774dfb.png" alt=""></p><p>Lucene允许新段被写入和打开，使其包含的文档在未进行一次完整提交时便对搜索可见。这种方式比进行一次提交代价要小得多，并且在不影响性能的前提下可以被频繁地执行。</p><p><img src="../assets/elasticsearch/797254f836dc5326dbc8d3079c081a0f.png" alt=""></p><p>在 Elasticsearch 中，写入和打开一个新段的轻量的过程叫做refresh。默认情况下每个分片会每秒自动刷新一次。这就是为什么我们说 Elasticsearch是近实时搜索：文档的变化并不是立即对搜索可见，但会在一秒之内变为可见。</p><p>这些行为可能会对新用户造成困惑：他们索引了一个文档然后尝试搜索它，但却没有搜到。这个问题的解决办法是用refresh API执行一次手动刷新：/usersl_refresh</p><p>尽管刷新是比提交轻量很多的操作，它还是会有性能开销。当写测试的时候，手动刷新很有用，但是不要在生产环境下每次索引一个文档都去手动刷新。相反，你的应用需要意识到Elasticsearch 的近实时的性质，并接受它的不足。</p><p>并不是所有的情况都需要每秒刷新。可能你正在使用Elasticsearch索引大量的日志文件，你可能想优化索引速度而不是近实时搜索，可以通过设置refresh_interval ，降低每个索引的刷新频率</p><pre><code>&#123;    &quot;settings&quot;: &#123;        &quot;refresh_interval&quot;: &quot;30s&quot;    &#125;&#125;</code></pre><p>refresh_interval可以在既存索引上进行动态更新。在生产环境中，当你正在建立一个大的新索引时，可以先关闭自动刷新，待开始使用该索引时，再把它们调回来。</p><pre><code># 关闭自动刷新PUT /users/_settings&#123; &quot;refresh_interval&quot;: -1 &#125;# 每一秒刷新PUT /users/_settings&#123; &quot;refresh_interval&quot;: &quot;1s&quot; &#125;</code></pre><h4 id="持久化变更"><a href="#持久化变更" class="headerlink" title="持久化变更"></a>持久化变更</h4><p>如果没有用fsync把数据从文件系统缓存刷（flush）到硬盘，我们不能保证数据在断电甚至是程序正常退出之后依然存在。为了保证Elasticsearch 的可靠性，需要确保数据变化被持久化到磁盘。在动态更新索引，我们说一次完整的提交会将段刷到磁盘，并写入一个包含所有段列表的提交点。Elasticsearch 在启动或重新打开一个索引的过程中使用这个提交点来判断哪些段隶属于当前分片。</p><p>即使通过每秒刷新(refresh）实现了近实时搜索，我们仍然需要经常进行完整提交来确保能从失败中恢复。但在两次提交之间发生变化的文档怎么办?我们也不希望丢失掉这些数据。Elasticsearch 增加了一个translog ，或者叫事务日志，在每一次对Elasticsearch进行操作时均进行了日志记录。</p><p>整个流程如下:</p><p>一、一个文档被索引之后，就会被添加到内存缓冲区，并且追加到了 translog</p><p><img src="../assets/elasticsearch/6f10ea0ed1bd27dcc70e51368e980b5c.png" alt=""></p><p>二、刷新（refresh）使分片每秒被刷新（refresh）一次：</p><ul><li>这些在内存缓冲区的文档被写入到一个新的段中，且没有进行fsync操作。</li><li>这个段被打开，使其可被搜索。</li><li>内存缓冲区被清空。</li></ul><p><img src="../assets/elasticsearch/7cfd12d6bac372d571bf138aeed632c2.png" alt=""></p><p>三、这个进程继续工作，更多的文档被添加到内存缓冲区和追加到事务日志。</p><p><img src="../assets/elasticsearch/b377f6da9b5516d0b6a84e1a541156ad.png" alt=""></p><p>四、每隔一段时间—例如translog变得越来越大，索引被刷新（flush）；一个新的translog被创建，并且一个全量提交被执行。</p><ul><li><p>所有在内存缓冲区的文档都被写入一个新的段。</p></li><li><p>缓冲区被清空。</p></li><li><p>一个提交点被写入硬盘。</p></li><li><p>文件系统缓存通过fsync被刷新（flush） 。</p></li><li><p>老的translog被删除。</p></li></ul><p>translog 提供所有还没有被刷到磁盘的操作的一个持久化纪录。当Elasticsearch启动的时候，它会从磁盘中使用最后一个提交点去恢复己知的段，并且会重放translog 中所有在最后一次提交后发生的变更操作。</p><p>translog 也被用来提供实时CRUD。当你试着通过ID查询、更新、删除一个文档，它会在尝试从相应的段中检索之前，首先检查 translog任何最近的变更。这意味着它总是能够实时地获取到文档的最新版本。</p><p><img src="../assets/elasticsearch/7a6af0758245a8be2b890acf14b97ce0.png" alt=""></p><p>执行一个提交并且截断translog 的行为在 Elasticsearch被称作一次flush。分片每30分钟被自动刷新（flush)，或者在 translog 太大的时候也会刷新。</p><p>你很少需要自己手动执行flush操作，通常情况下，自动刷新就足够了。这就是说，在重启节点或关闭索引之前执行 flush有益于你的索引。当Elasticsearch尝试恢复或重新打开一个索引，它需要重放translog中所有的操作，所以如果日志越短，恢复越快。</p><p>translog 的目的是保证操作不会丢失，在文件被fsync到磁盘前，被写入的文件在重启之后就会丢失。默认translog是每5秒被fsync刷新到硬盘，或者在每次写请求完成之后执行（e.g. index, delete, update, bulk）。这个过程在主分片和复制分片都会发生。最终，基本上，这意味着在整个请求被fsync到主分片和复制分片的translog之前，你的客户端不会得到一个200 OK响应。</p><p>在每次请求后都执行一个fsync会带来一些性能损失，尽管实践表明这种损失相对较小（特别是 bulk 导入，它在一次请求中平摊了大量文档的开销）。</p><p>但是对于一些大容量的偶尔丢失几秒数据问题也并不严重的集群，使用异步的 fsync还是比较有益的。比如，写入的数据被缓存到内存中，再每5秒执行一次 fsync 。如果你决定使用异步translog 的话，你需要保证在发生 crash 时，丢失掉 sync_interval时间段的数据也无所谓。请在决定前知晓这个特性。如果你不确定这个行为的后果，最好是使用默认的参数{“index.translog.durability”: “request”}来避免数据丢失。</p><h4 id="段合并"><a href="#段合并" class="headerlink" title="段合并"></a>段合并</h4><p>由于自动刷新流程每秒会创建一个新的段，这样会导致短时间内的段数量暴增。而段数目太多会带来较大的麻烦。每一个段都会消耗文件句柄、内存和 cpu运行周期。更重要的是，每个搜索请求都必须轮流检查每个段；所以段越多，搜索也就越慢。</p><p>Elasticsearch通过在后台进行段合并来解决这个问题。小的段被合并到大的段，然后这些大的段再被合并到更大的段。</p><p>段合并的时候会将那些旧的已删除文档从文件系统中清除。被删除的文档（或被更新文档的旧版本）不会被拷贝到新的大段中。</p><p>启动段合并不需要你做任何事。进行索引和搜索时会自动进行。</p><p>一、当索引的时候，刷新（refresh）操作会创建新的段并将段打开以供搜索使用。</p><p>二、合并进程选择一小部分大小相似的段，并且在后台将它们合并到更大的段中。这并不会中断索引和搜索。</p><p><img src="../assets/elasticsearch/578847dd5a6c2711c2507c068e47a34a.png" alt=""></p><p>三、一旦合并结束，老的段被删除</p><ul><li>新的段被刷新(flush)到了磁盘。</li><li>写入一个包含新段且排除旧的和较小的段的新提交点。</li><li>新的段被打开用来搜索。老的段被删除。</li></ul><p><img src="../assets/elasticsearch/634e2059c793b14ab225857d0a2805e0.png" alt=""></p><p>合并大的段需要消耗大量的 I/O 和 CPU 资源，如果任其发展会影响搜索性能。 Elasticsearch在默认情况下会对合并流程进行资源限制，所以搜索仍然有足够的资源很好地执行。</p><h3 id="46-进阶-文档分析"><a href="#46-进阶-文档分析" class="headerlink" title="46-进阶-文档分析"></a>46-进阶-文档分析</h3><p>分析包含下面的过程：</p><ul><li>将一块文本分成适合于倒排索引的独立的词条。</li><li>将这些词条统一化为标准格式以提高它们的“可搜索性”，或者recall。</li></ul><p>分析器执行上面的工作。分析器实际上是将三个功能封装到了一个包里：</p><ul><li>字符过滤器：首先，字符串按顺序通过每个 字符过滤器 。他们的任务是在分词前整理字符串。一个字符过滤器可以用来去掉 HTML，或者将 &amp; 转化成 and。</li><li>分词器：其次，字符串被分词器分为单个的词条。一个简单的分词器遇到空格和标点的时候，可能会将文本拆分成词条。</li><li>Token 过滤器：最后，词条按顺序通过每个 token 过滤器 。这个过程可能会改变词条（例如，小写化Quick ），删除词条（例如， 像 a， and， the 等无用词），或者增加词条（例如，像jump和leap这种同义词）</li></ul><h4 id="内置分析器"><a href="#内置分析器" class="headerlink" title="内置分析器"></a>内置分析器</h4><p>Elasticsearch还附带了可以直接使用的预包装的分析器。接下来我们会列出最重要的分析器。为了证明它们的差异，我们看看每个分析器会从下面的字符串得到哪些词条：</p><pre><code>&quot;Set the shape to semi-transparent by calling set_trans(5)&quot;</code></pre><ul><li>标准分析器</li></ul><p>标准分析器是Elasticsearch 默认使用的分析器。它是分析各种语言文本最常用的选择。它根据Unicode 联盟定义的单词边界划分文本。删除绝大部分标点。最后，将词条小写。它会产生：</p><pre><code>set, the, shape, to, semi, transparent, by, calling, set_trans, 5</code></pre><ul><li>简单分析器</li></ul><p>简单分析器在任何不是字母的地方分隔文本，将词条小写。它会产生：</p><pre><code>set, the, shape, to, semi, transparent, by, calling, set, trans</code></pre><ul><li>空格分析器</li></ul><p>空格分析器在空格的地方划分文本。它会产生:</p><pre><code>Set, the, shape, to, semi-transparent, by, calling, set_trans(5)</code></pre><ul><li>语言分析器</li></ul><p>特定语言分析器可用于很多语言。它们可以考虑指定语言的特点。例如，英语分析器附带了一组英语无用词（常用单词，例如and或者the ,它们对相关性没有多少影响），它们会被删除。由于理解英语语法的规则，这个分词器可以提取英语单词的词干。</p><p>英语分词器会产生下面的词条：</p><pre><code>set, shape, semi, transpar, call, set_tran, 5</code></pre><p>注意看transparent、calling和 set_trans已经变为词根格式。</p><h4 id="分析器使用场景"><a href="#分析器使用场景" class="headerlink" title="分析器使用场景"></a>分析器使用场景</h4><p>当我们索引一个文档，它的全文域被分析成词条以用来创建倒排索引。但是，当我们在全文域搜索的时候，我们需要将查询字符串通过相同的分析过程，以保证我们搜索的词条格式与索引中的词条格式一致。</p><p>全文查询，理解每个域是如何定义的，因此它们可以做正确的事：</p><ul><li><p>当你查询一个全文域时，会对查询字符串应用相同的分析器，以产生正确的搜索词条列表。</p></li><li><p>当你查询一个精确值域时，不会分析查询字符串，而是搜索你指定的精确值。</p></li></ul><h4 id="测试分析器"><a href="#测试分析器" class="headerlink" title="测试分析器"></a>测试分析器</h4><p>有些时候很难理解分词的过程和实际被存储到索引中的词条，特别是你刚接触Elasticsearch。为了理解发生了什么，你可以使用analyze API来看文本是如何被分析的。在消息体里，指定分析器和要分析的文本。</p><pre><code>#GET http://localhost:9200/_analyze&#123;    &quot;analyzer&quot;: &quot;standard&quot;,    &quot;text&quot;: &quot;Text to analyze&quot;&#125;</code></pre><p>结果中每个元素代表一个单独的词条：</p><pre><code>&#123;    &quot;tokens&quot;: [        &#123;            &quot;token&quot;: &quot;text&quot;,             &quot;start_offset&quot;: 0,             &quot;end_offset&quot;: 4,             &quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,             &quot;position&quot;: 1        &#125;,         &#123;            &quot;token&quot;: &quot;to&quot;,             &quot;start_offset&quot;: 5,             &quot;end_offset&quot;: 7,             &quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,             &quot;position&quot;: 2        &#125;,         &#123;            &quot;token&quot;: &quot;analyze&quot;,             &quot;start_offset&quot;: 8,             &quot;end_offset&quot;: 15,             &quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,             &quot;position&quot;: 3        &#125;    ]&#125;</code></pre><ul><li>token是实际存储到索引中的词条。</li><li>start<em> offset 和end</em> offset指明字符在原始字符串中的位置。</li><li>position指明词条在原始文本中出现的位置。</li></ul><h4 id="指定分析器"><a href="#指定分析器" class="headerlink" title="指定分析器"></a>指定分析器</h4><p>当Elasticsearch在你的文档中检测到一个新的字符串域，它会自动设置其为一个全文字符串域，使用 标准 分析器对它进行分析。你不希望总是这样。可能你想使用一个不同的分析器，适用于你的数据使用的语言。有时候你想要一个字符串域就是一个字符串域，不使用分析，直接索引你传入的精确值，例如用户 ID 或者一个内部的状态域或标签。要做到这一点，我们必须手动指定这些域的映射。</p><p>（细粒度指定分析器）</p><h4 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h4><p>首先通过 Postman 发送 GET 请求查询分词效果</p><pre><code># GET http://localhost:9200/_analyze&#123;    &quot;text&quot;:&quot;测试单词&quot;&#125;</code></pre><p>ES 的默认分词器无法识别中文中测试、 单词这样的词汇，而是简单的将每个字拆完分为一个词。</p><pre><code>&#123;    &quot;tokens&quot;: [        &#123;            &quot;token&quot;: &quot;测&quot;,             &quot;start_offset&quot;: 0,             &quot;end_offset&quot;: 1,             &quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,             &quot;position&quot;: 0        &#125;,         &#123;            &quot;token&quot;: &quot;试&quot;,             &quot;start_offset&quot;: 1,             &quot;end_offset&quot;: 2,             &quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,             &quot;position&quot;: 1        &#125;,         &#123;            &quot;token&quot;: &quot;单&quot;,             &quot;start_offset&quot;: 2,             &quot;end_offset&quot;: 3,             &quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,             &quot;position&quot;: 2        &#125;,         &#123;            &quot;token&quot;: &quot;词&quot;,             &quot;start_offset&quot;: 3,             &quot;end_offset&quot;: 4,             &quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,             &quot;position&quot;: 3        &#125;    ]&#125;</code></pre><p>这样的结果显然不符合我们的使用要求，所以我们需要下载 ES 对应版本的中文分词器。</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.8.0">IK 中文分词器下载网址</a></p><p>将解压后的后的文件夹放入 ES 根目录下的 plugins 目录下，重启 ES 即可使用。</p><p>我们这次加入新的查询参数”analyzer”:“ik_max_word”。</p><pre><code># GET http://localhost:9200/_analyze&#123;    &quot;text&quot;:&quot;测试单词&quot;,    &quot;analyzer&quot;:&quot;ik_max_word&quot;&#125;</code></pre><ul><li>ik_max_word：会将文本做最细粒度的拆分。</li><li>ik_smart：会将文本做最粗粒度的拆分。</li></ul><p>使用中文分词后的结果为：</p><pre><code>&#123;    &quot;tokens&quot;: [        &#123;            &quot;token&quot;: &quot;测试&quot;,             &quot;start_offset&quot;: 0,             &quot;end_offset&quot;: 2,             &quot;type&quot;: &quot;CN_WORD&quot;,             &quot;position&quot;: 0        &#125;,         &#123;            &quot;token&quot;: &quot;单词&quot;,             &quot;start_offset&quot;: 2,             &quot;end_offset&quot;: 4,             &quot;type&quot;: &quot;CN_WORD&quot;,             &quot;position&quot;: 1        &#125;    ]&#125;</code></pre><p>ES 中也可以进行扩展词汇，首先查询</p><pre><code>#GET http://localhost:9200/_analyze&#123;    &quot;text&quot;:&quot;弗雷尔卓德&quot;,    &quot;analyzer&quot;:&quot;ik_max_word&quot;&#125;</code></pre><p>仅仅可以得到每个字的分词结果，我们需要做的就是使分词器识别到弗雷尔卓德也是一个词语。</p><pre><code>&#123;    &quot;tokens&quot;: [        &#123;            &quot;token&quot;: &quot;弗&quot;,            &quot;start_offset&quot;: 0,            &quot;end_offset&quot;: 1,            &quot;type&quot;: &quot;CN_CHAR&quot;,            &quot;position&quot;: 0        &#125;,        &#123;            &quot;token&quot;: &quot;雷&quot;,            &quot;start_offset&quot;: 1,            &quot;end_offset&quot;: 2,            &quot;type&quot;: &quot;CN_CHAR&quot;,            &quot;position&quot;: 1        &#125;,        &#123;            &quot;token&quot;: &quot;尔&quot;,            &quot;start_offset&quot;: 2,            &quot;end_offset&quot;: 3,            &quot;type&quot;: &quot;CN_CHAR&quot;,            &quot;position&quot;: 2        &#125;,        &#123;            &quot;token&quot;: &quot;卓&quot;,            &quot;start_offset&quot;: 3,            &quot;end_offset&quot;: 4,            &quot;type&quot;: &quot;CN_CHAR&quot;,            &quot;position&quot;: 3        &#125;,        &#123;            &quot;token&quot;: &quot;德&quot;,            &quot;start_offset&quot;: 4,            &quot;end_offset&quot;: 5,            &quot;type&quot;: &quot;CN_CHAR&quot;,            &quot;position&quot;: 4        &#125;    ]&#125;1. 首先进入 ES 根目录中的 plugins 文件夹下的 ik 文件夹，进入 config 目录，创建 custom.dic文件，写入“弗雷尔卓德”。2. 同时打开 IKAnalyzer.cfg.xml 文件，将新建的 custom.dic 配置其中。3. 重启 ES 服务器 。</code></pre><p>​<br>    &lt;?xml version=”1.0” encoding=”UTF-8”?&gt;<br>    &lt;!DOCTYPE properties SYSTEM “<a href="http://java.sun.com/dtd/properties.dtd&quot;&gt;">http://java.sun.com/dtd/properties.dtd&quot;&gt;</a><br>    <properties><br>        <comment>IK Analyzer 扩展配置</comment><br>        <!--用户可以在这里配置自己的扩展字典 --><br>        <entry key="ext_dict">custom.dic</entry><br>         <!--用户可以在这里配置自己的扩展停止词字典--><br>        <entry key="ext_stopwords">&lt;/entry&gt;<br>        <!--用户可以在这里配置远程扩展字典 --><br>        &lt;!— <entry key="remote_ext_dict">words_location</entry> —&gt;<br>        <!--用户可以在这里配置远程扩展停止词字典--><br>        <!-- <entry key="remote_ext_stopwords">words_location</entry> -->    </properties></p><p>扩展后再次查询</p><pre><code># GET http://localhost:9200/_analyze&#123;    &quot;text&quot;:&quot;测试单词&quot;,    &quot;analyzer&quot;:&quot;ik_max_word&quot;&#125;</code></pre><p>返回结果如下：</p><pre><code>&#123;    &quot;tokens&quot;: [        &#123;            &quot;token&quot;: &quot;弗雷尔卓德&quot;,            &quot;start_offset&quot;: 0,            &quot;end_offset&quot;: 5,            &quot;type&quot;: &quot;CN_WORD&quot;,            &quot;position&quot;: 0        &#125;    ]&#125;</code></pre><h4 id="自定义分析器"><a href="#自定义分析器" class="headerlink" title="自定义分析器"></a>自定义分析器</h4><p>虽然Elasticsearch带有一些现成的分析器，然而在分析器上Elasticsearch真正的强大之处在于，你可以通过在一个适合你的特定数据的设置之中组合字符过滤器、分词器、词汇单元过滤器来创建自定义的分析器。在分析与分析器我们说过，一个分析器就是在一个包里面组合了三种函数的一个包装器，三种函数按照顺序被执行：</p><h5 id="字符过滤器"><a href="#字符过滤器" class="headerlink" title="字符过滤器"></a>字符过滤器</h5><p>字符过滤器用来整理一个尚未被分词的字符串。例如，如果我们的文本是HTML格式的，它会包含像<code>&lt;p&gt;</code>或者<code>&lt;div&gt;</code>这样的HTML标签，这些标签是我们不想索引的。我们可以使用html清除字符过滤器来移除掉所有的HTML标签，并且像把<code>&amp;Aacute;</code>转换为相对应的Unicode字符Á 这样，转换HTML实体。一个分析器可能有0个或者多个字符过滤器。</p><h5 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h5><p>一个分析器必须有一个唯一的分词器。分词器把字符串分解成单个词条或者词汇单元。标准分析器里使用的标准分词器把一个字符串根据单词边界分解成单个词条，并且移除掉大部分的标点符号，然而还有其他不同行为的分词器存在。</p><p>例如，关键词分词器完整地输出接收到的同样的字符串，并不做任何分词。空格分词器只根据空格分割文本。正则分词器根据匹配正则表达式来分割文本。</p><h5 id="词单元过滤器"><a href="#词单元过滤器" class="headerlink" title="词单元过滤器"></a>词单元过滤器</h5><p>经过分词，作为结果的词单元流会按照指定的顺序通过指定的词单元过滤器。词单元过滤器可以修改、添加或者移除词单元。我们已经提到过lowercase和stop词过滤器，但是在Elasticsearch 里面还有很多可供选择的词单元过滤器。词干过滤器把单词遏制为词干。ascii_folding过滤器移除变音符，把一个像”très”这样的词转换为“tres”。</p><p>ngram和 edge_ngram词单元过滤器可以产生适合用于部分匹配或者自动补全的词单元。</p><h5 id="自定义分析器例子"><a href="#自定义分析器例子" class="headerlink" title="自定义分析器例子"></a>自定义分析器例子</h5><p>接下来，我们看看如何创建自定义的分析器：</p><pre><code>#PUT http://localhost:9200/my_index&#123;    &quot;settings&quot;: &#123;        &quot;analysis&quot;: &#123;            &quot;char_filter&quot;: &#123;                &quot;&amp;_to_and&quot;: &#123;                    &quot;type&quot;: &quot;mapping&quot;,                     &quot;mappings&quot;: [                        &quot;&amp;=&gt; and &quot;                    ]                &#125;            &#125;,             &quot;filter&quot;: &#123;                &quot;my_stopwords&quot;: &#123;                    &quot;type&quot;: &quot;stop&quot;,                     &quot;stopwords&quot;: [                        &quot;the&quot;,                         &quot;a&quot;                    ]                &#125;            &#125;,             &quot;analyzer&quot;: &#123;                &quot;my_analyzer&quot;: &#123;                    &quot;type&quot;: &quot;custom&quot;,                     &quot;char_filter&quot;: [                        &quot;html_strip&quot;,                         &quot;&amp;_to_and&quot;                    ],                     &quot;tokenizer&quot;: &quot;standard&quot;,                     &quot;filter&quot;: [                        &quot;lowercase&quot;,                         &quot;my_stopwords&quot;                    ]                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>索引被创建以后，使用 analyze API 来 测试这个新的分析器：</p><pre><code># GET http://127.0.0.1:9200/my_index/_analyze&#123;    &quot;text&quot;:&quot;The quick &amp; brown fox&quot;,    &quot;analyzer&quot;: &quot;my_analyzer&quot;&#125;</code></pre><p>返回结果为：</p><pre><code>&#123;    &quot;tokens&quot;: [        &#123;            &quot;token&quot;: &quot;quick&quot;,            &quot;start_offset&quot;: 4,            &quot;end_offset&quot;: 9,            &quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,            &quot;position&quot;: 1        &#125;,        &#123;            &quot;token&quot;: &quot;and&quot;,            &quot;start_offset&quot;: 10,            &quot;end_offset&quot;: 11,            &quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,            &quot;position&quot;: 2        &#125;,        &#123;            &quot;token&quot;: &quot;brown&quot;,            &quot;start_offset&quot;: 12,            &quot;end_offset&quot;: 17,            &quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,            &quot;position&quot;: 3        &#125;,        &#123;            &quot;token&quot;: &quot;fox&quot;,            &quot;start_offset&quot;: 18,            &quot;end_offset&quot;: 21,            &quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,            &quot;position&quot;: 4        &#125;    ]&#125;</code></pre><h3 id="47-进阶-文档控制"><a href="#47-进阶-文档控制" class="headerlink" title="47-进阶-文档控制"></a>47-进阶-文档控制</h3><h4 id="文档冲突"><a href="#文档冲突" class="headerlink" title="文档冲突"></a>文档冲突</h4><p>当我们使用index API更新文档，可以一次性读取原始文档，做我们的修改，然后重新索引整个文档。最近的索引请求将获胜：无论最后哪一个文档被索引，都将被唯一存储在 Elasticsearch 中。如果其他人同时更改这个文档，他们的更改将丢失。</p><p>很多时候这是没有问题的。也许我们的主数据存储是一个关系型数据库，我们只是将数据复制到Elasticsearch中并使其可被搜索。也许两个人同时更改相同的文档的几率很小。或者对于我们的业务来说偶尔丢失更改并不是很严重的问题。</p><p>但有时丢失了一个变更就是非常严重的。试想我们使用Elasticsearch 存储我们网上商城商品库存的数量，每次我们卖一个商品的时候，我们在 Elasticsearch 中将库存数量减少。有一天，管理层决定做一次促销。突然地，我们一秒要卖好几个商品。假设有两个web程序并行运行，每一个都同时处理所有商品的销售。</p><p><img src="../assets/elasticsearch/beb2dbf57cb7737fbd1b1f060233be99.png" alt=""></p><p>web_1 对stock_count所做的更改已经丢失，因为 web_2不知道它的 stock_count的拷贝已经过期。结果我们会认为有超过商品的实际数量的库存，因为卖给顾客的库存商品并不存在，我们将让他们非常失望。</p><p>变更越频繁，读数据和更新数据的间隙越长，也就越可能丢失变更。在数据库领域中，有两种方法通常被用来确保并发更新时变更不会丢失：</p><ul><li>悲观并发控制：这种方法被关系型数据库广泛使用，它假定有变更冲突可能发生，因此阻塞访问资源以防止冲突。一个典型的例子是读取一行数据之前先将其锁住，确保只有放置锁的线程能够对这行数据进行修改。</li><li>乐观并发控制：Elasticsearch 中使用的这种方法假定冲突是不可能发生的，并且不会阻塞正在尝试的操作。然而，如果源数据在读写当中被修改，更新将会失败。应用程序接下来将决定该如何解决冲突。例如，可以重试更新、使用新的数据、或者将相关情况报告给用户。</li></ul><h4 id="乐观并发控制"><a href="#乐观并发控制" class="headerlink" title="乐观并发控制"></a>乐观并发控制</h4><p>Elasticsearch是分布式的。当文档创建、更新或删除时，新版本的文档必须复制到集群中的其他节点。Elasticsearch也是异步和并发的，这意味着这些复制请求被并行发送，并且到达目的地时也许顺序是乱的。Elasticsearch需要一种方法确保文档的旧版本不会覆盖新的版本。</p><p>当我们之前讨论index , GET和DELETE请求时，我们指出每个文档都有一个_version（版本号），当文档被修改时版本号递增。Elasticsearch使用这个version号来确保变更以正确顺序得到执行。如果旧版本的文档在新版本之后到达，它可以被简单的忽略。</p><p>我们可以利用version号来确保应用中相互冲突的变更不会导致数据丢失。我们通过指定想要修改文档的 version号来达到这个目的。如果该版本不是当前版本号，我们的请求将会失败。</p><p>老的版本es使用version，但是新版本不支持了，会报下面的错误，提示我们用if_seq _no和if _primary_term</p><p>创建索引</p><pre><code>#PUT http://127.0.0.1:9200/shopping/_create/1001</code></pre><p>返回结果</p><pre><code>&#123;    &quot;_index&quot;: &quot;shopping&quot;,    &quot;_type&quot;: &quot;_doc&quot;,    &quot;_id&quot;: &quot;1001&quot;,    &quot;_version&quot;: 1,    &quot;result&quot;: &quot;created&quot;,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 2,        &quot;successful&quot;: 1,        &quot;failed&quot;: 0    &#125;,    &quot;_seq_no&quot;: 10,    &quot;_primary_term&quot;: 15&#125;</code></pre><p>更新数据</p><pre><code>#POST http://127.0.0.1:9200/shopping/_update/1001&#123;    &quot;doc&quot;:&#123;        &quot;title&quot;:&quot;华为手机&quot;    &#125;&#125;</code></pre><p>返回结果：</p><pre><code>&#123;    &quot;_index&quot;: &quot;shopping&quot;,    &quot;_type&quot;: &quot;_doc&quot;,    &quot;_id&quot;: &quot;1001&quot;,    &quot;_version&quot;: 2,    &quot;result&quot;: &quot;updated&quot;,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 2,        &quot;successful&quot;: 1,        &quot;failed&quot;: 0    &#125;,    &quot;_seq_no&quot;: 11,    &quot;_primary_term&quot;: 15&#125;</code></pre><p>旧版本使用的防止冲突更新方法：</p><pre><code>#POST http://127.0.0.1:9200/shopping/_update/1001?version=1&#123;    &quot;doc&quot;:&#123;        &quot;title&quot;:&quot;华为手机2&quot;    &#125;&#125;</code></pre><p>返回结果：</p><pre><code>&#123;    &quot;error&quot;: &#123;        &quot;root_cause&quot;: [            &#123;                &quot;type&quot;: &quot;action_request_validation_exception&quot;,                &quot;reason&quot;: &quot;Validation Failed: 1: internal versioning can not be used for optimistic concurrency control. Please use `if_seq_no` and `if_primary_term` instead;&quot;            &#125;        ],        &quot;type&quot;: &quot;action_request_validation_exception&quot;,        &quot;reason&quot;: &quot;Validation Failed: 1: internal versioning can not be used for optimistic concurrency control. Please use `if_seq_no` and `if_primary_term` instead;&quot;    &#125;,    &quot;status&quot;: 400&#125;</code></pre><p>新版本使用的防止冲突更新方法：</p><pre><code>#POST http://127.0.0.1:9200/shopping/_update/1001?if_seq_no=11&amp;if_primary_term=15&#123;    &quot;doc&quot;:&#123;        &quot;title&quot;:&quot;华为手机2&quot;    &#125;&#125;</code></pre><p>返回结果：</p><pre><code>&#123;    &quot;_index&quot;: &quot;shopping&quot;,    &quot;_type&quot;: &quot;_doc&quot;,    &quot;_id&quot;: &quot;1001&quot;,    &quot;_version&quot;: 3,    &quot;result&quot;: &quot;updated&quot;,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 2,        &quot;successful&quot;: 1,        &quot;failed&quot;: 0    &#125;,    &quot;_seq_no&quot;: 12,    &quot;_primary_term&quot;: 16&#125;</code></pre><h4 id="外部系统版本控制"><a href="#外部系统版本控制" class="headerlink" title="外部系统版本控制"></a>外部系统版本控制</h4><p>一个常见的设置是使用其它数据库作为主要的数据存储，使用Elasticsearch做数据检索，这意味着主数据库的所有更改发生时都需要被复制到Elasticsearch，如果多个进程负责这一数据同步，你可能遇到类似于之前描述的并发问题。</p><p>如果你的主数据库已经有了版本号，或一个能作为版本号的字段值比如timestamp，那么你就可以在 Elasticsearch 中通过增加 version_type=extermal到查询字符串的方式重用这些相同的版本号，版本号必须是大于零的整数，且小于9.2E+18，一个Java中 long类型的正值。</p><p>外部版本号的处理方式和我们之前讨论的内部版本号的处理方式有些不同，Elasticsearch不是检查当前_version和请求中指定的版本号是否相同，而是检查当前_version是否小于指定的版本号。如果请求成功，外部的版本号作为文档的新_version进行存储。</p><pre><code>#POST http://127.0.0.1:9200/shopping/_doc/1001?version=300&amp;version_type=external&#123;    &quot;title&quot;:&quot;华为手机2&quot;&#125;</code></pre><p>返回结果：</p><pre><code>&#123;    &quot;_index&quot;: &quot;shopping&quot;,    &quot;_type&quot;: &quot;_doc&quot;,    &quot;_id&quot;: &quot;1001&quot;,    &quot;_version&quot;: 300,    &quot;result&quot;: &quot;updated&quot;,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 2,        &quot;successful&quot;: 1,        &quot;failed&quot;: 0    &#125;,    &quot;_seq_no&quot;: 13,    &quot;_primary_term&quot;: 16&#125;</code></pre><h3 id="48-进阶-文档展示-Kibana"><a href="#48-进阶-文档展示-Kibana" class="headerlink" title="48-进阶-文档展示-Kibana"></a>48-进阶-文档展示-Kibana</h3><p>Kibana是一个免费且开放的用户界面，能够让你对Elasticsearch 数据进行可视化，并让你在Elastic Stack 中进行导航。你可以进行各种操作，从跟踪查询负载，到理解请求如何流经你的整个应用，都能轻松完成。</p><p><a href="https://artifacts.elastic.co/downloads/kibana/kibana-7.8.0-windows-x86_64.zip">Kibana下载网址</a></p><p>一、解压缩下载的 zip 文件。</p><p>二、修改 config/kibana.yml 文件。</p><pre><code># 默认端口server.port: 5601# ES 服务器的地址elasticsearch.hosts: [&quot;http://localhost:9200&quot;]# 索引名kibana.index: &quot;.kibana&quot;# 支持中文i18n.locale: &quot;zh-CN&quot;</code></pre><p>三、Windows 环境下执行 bin/kibana.bat 文件。（首次启动有点耗时）</p><p>四、通过浏览器访问：<a href="http://localhost:5601。">http://localhost:5601。</a></p><p><img src="../assets/elasticsearch/22c3a6491a72d63deaad80abce01ce05.png" alt=""></p><h2 id="第5章-Elasticsearch集成"><a href="#第5章-Elasticsearch集成" class="headerlink" title="第5章 Elasticsearch集成"></a>第5章 Elasticsearch集成</h2><h3 id="49-框架集成-SpringData-整体介绍"><a href="#49-框架集成-SpringData-整体介绍" class="headerlink" title="49-框架集成-SpringData-整体介绍"></a>49-框架集成-SpringData-整体介绍</h3><p>Spring Data是一个用于简化数据库、非关系型数据库、索引库访问，并支持云服务的开源框架。其主要目标是使得对数据的访问变得方便快捷，并支持 map-reduce框架和云计算数据服务。Spring Data可以极大的简化JPA(Elasticsearch…)的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。除了CRUD 外，还包括如分页、排序等一些常用的功能。</p><p><a href="https://spring.io/projects/spring-data">Spring Data 的官网</a></p><p>Spring Data 常用的功能模块如下：</p><ul><li>Spring Data JDBC</li><li>Spring Data JPA</li><li>Spring Data LDAP</li><li>Spring Data MongoDB</li><li>Spring Data Redis</li><li>Spring Data R2DBC</li><li>Spring Data REST</li><li>Spring Data for Apache Cassandra</li><li>Spring Data for Apache Geode</li><li>Spring Data for Apache Solr</li><li>Spring Data for Pivotal GemFire</li><li>Spring Data Couchbase</li><li>Spring Data Elasticsearch</li><li>Spring Data Envers</li><li>Spring Data Neo4j</li><li>Spring Data JDBC Extensions</li><li>Spring for Apache Hadoop</li></ul><h4 id="Spring-Data-Elasticsearch-介绍"><a href="#Spring-Data-Elasticsearch-介绍" class="headerlink" title="Spring Data Elasticsearch 介绍"></a>Spring Data Elasticsearch 介绍</h4><p>Spring Data Elasticsearch基于Spring Data API简化 Elasticsearch 操作，将原始操作Elasticsearch 的客户端API进行封装。Spring Data为Elasticsearch 项目提供集成搜索引擎。Spring Data Elasticsearch POJO的关键功能区域为中心的模型与Elastichsearch交互文档和轻松地编写一个存储索引库数据访问层。</p><p><a href="https://spring.io/projects/spring-data-elasticsearch">Spring Data Elasticsearch 官网</a></p><h3 id="50-框架集成-SpringData-代码功能集成"><a href="#50-框架集成-SpringData-代码功能集成" class="headerlink" title="50-框架集成-SpringData-代码功能集成"></a>50-框架集成-SpringData-代码功能集成</h3><p>一、创建Maven项目。</p><p>二、修改pom文件，增加依赖关系。</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.3.6.RELEASE&lt;/version&gt;        &lt;relativePath/&gt;    &lt;/parent&gt;    &lt;groupId&gt;com.lun&lt;/groupId&gt;    &lt;artifactId&gt;SpringDataWithES&lt;/artifactId&gt;    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;    &lt;properties&gt;        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;    &lt;/properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;            &lt;scope&gt;runtime&lt;/scope&gt;            &lt;optional&gt;true&lt;/optional&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-test&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;junit&lt;/groupId&gt;            &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><p>三、增加配置文件。</p><p>在 resources 目录中增加application.properties文件</p><pre><code># es 服务地址elasticsearch.host=127.0.0.1# es 服务端口elasticsearch.port=9200# 配置日志级别,开启 debug 日志logging.level.com.atguigu.es=debug</code></pre><p>四、Spring Boot 主程序。</p><pre><code>import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class MainApplication &#123;    public static void main(String[] args) &#123;        SpringApplication.run(MainApplication.class, args);    &#125;&#125;</code></pre><p>五、数据实体类。</p><pre><code>import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import lombok.ToString;import org.springframework.data.annotation.Id;import org.springframework.data.elasticsearch.annotations.Document;import org.springframework.data.elasticsearch.annotations.Field;import org.springframework.data.elasticsearch.annotations.FieldType;@Data@NoArgsConstructor@AllArgsConstructor@ToString@Document(indexName = &quot;shopping&quot;, shards = 3, replicas = 1)public class Product &#123;    //必须有 id,这里的 id 是全局唯一的标识，等同于 es 中的&quot;_id&quot;    @Id    private Long id;//商品唯一标识    /**     * type : 字段数据类型     * analyzer : 分词器类型     * index : 是否索引(默认:true)     * Keyword : 短语,不进行分词     */    @Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)    private String title;//商品名称    @Field(type = FieldType.Keyword)    private String category;//分类名称    @Field(type = FieldType.Double)    private Double price;//商品价格    @Field(type = FieldType.Keyword, index = false)    private String images;//图片地址&#125;</code></pre><p>六、配置类</p><ul><li>ElasticsearchRestTemplate是spring-data-elasticsearch项目中的一个类,和其他spring项目中的 template类似。</li><li>在新版的spring-data-elasticsearch 中，ElasticsearchRestTemplate 代替了原来的ElasticsearchTemplate。</li><li>原因是ElasticsearchTemplate基于TransportClient，TransportClient即将在8.x 以后的版本中移除。所以，我们推荐使用ElasticsearchRestTemplate。</li><li>ElasticsearchRestTemplate基于RestHighLevelClient客户端的。需要自定义配置类，继承AbstractElasticsearchConfiguration，并实现elasticsearchClient()抽象方法，创建RestHighLevelClient对象。</li></ul><p>AbstractElasticsearchConfiguration源码：</p><pre><code>package org.springframework.data.elasticsearch.config;import org.elasticsearch.client.RestHighLevelClient;import org.springframework.context.annotation.Bean;import org.springframework.data.elasticsearch.core.ElasticsearchOperations;import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;import org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter;/** * @author Christoph Strobl * @author Peter-Josef Meisch * @since 3.2 * @see ElasticsearchConfigurationSupport */public abstract class AbstractElasticsearchConfiguration extends ElasticsearchConfigurationSupport &#123;    //需重写本方法    public abstract RestHighLevelClient elasticsearchClient();    @Bean(name = &#123; &quot;elasticsearchOperations&quot;, &quot;elasticsearchTemplate&quot; &#125;)    public ElasticsearchOperations elasticsearchOperations(ElasticsearchConverter elasticsearchConverter) &#123;        return new ElasticsearchRestTemplate(elasticsearchClient(), elasticsearchConverter);    &#125;&#125;</code></pre><p>需要自定义配置类，继承AbstractElasticsearchConfiguration，并实现elasticsearchClient()抽象方法，创建RestHighLevelClient对象。</p><pre><code>import lombok.Data;import org.apache.http.HttpHost;import org.elasticsearch.client.RestClient;import org.elasticsearch.client.RestClientBuilder;import org.elasticsearch.client.RestHighLevelClient;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Configuration;import org.springframework.data.elasticsearch.config.AbstractElasticsearchConfiguration;@ConfigurationProperties(prefix = &quot;elasticsearch&quot;)@Configuration@Datapublic class ElasticsearchConfig extends AbstractElasticsearchConfiguration&#123;    private String host ;    private Integer port ;    //重写父类方法    @Override    public RestHighLevelClient elasticsearchClient() &#123;        RestClientBuilder builder = RestClient.builder(new HttpHost(host, port));        RestHighLevelClient restHighLevelClient = new                RestHighLevelClient(builder);        return restHighLevelClient;    &#125;&#125;</code></pre><p>七、DAO 数据访问对象</p><pre><code>import com.lun.model.Product;import org.springframework.data.elasticsearch.repository.ElasticsearchRepository;import org.springframework.stereotype.Repository;@Repositorypublic interface ProductDao extends ElasticsearchRepository&lt;Product, Long&gt;&#123;&#125;</code></pre><h3 id="51-框架集成-SpringData-集成测试-索引操作"><a href="#51-框架集成-SpringData-集成测试-索引操作" class="headerlink" title="51-框架集成-SpringData-集成测试-索引操作"></a>51-框架集成-SpringData-集成测试-索引操作</h3><pre><code>import com.lun.model.Product;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class SpringDataESIndexTest &#123;    //注入 ElasticsearchRestTemplate    @Autowired    private ElasticsearchRestTemplate elasticsearchRestTemplate;    //创建索引并增加映射配置    @Test    public void createIndex()&#123;        //创建索引，系统初始化会自动创建索引        System.out.println(&quot;创建索引&quot;);    &#125;    @Test    public void deleteIndex()&#123;        //创建索引，系统初始化会自动创建索引        boolean flg = elasticsearchRestTemplate.deleteIndex(Product.class);        System.out.println(&quot;删除索引 = &quot; + flg);    &#125;&#125;</code></pre><p>用Postman 检测有没有创建和删除。</p><pre><code>#GET http://localhost:9200/_cat/indices?v </code></pre><h3 id="52-框架集成-SpringData-集成测试-文档操作"><a href="#52-框架集成-SpringData-集成测试-文档操作" class="headerlink" title="52-框架集成-SpringData-集成测试-文档操作"></a>52-框架集成-SpringData-集成测试-文档操作</h3><pre><code>import com.lun.dao.ProductDao;import com.lun.model.Product;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Sort;import org.springframework.test.context.junit4.SpringRunner;import java.util.ArrayList;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class SpringDataESProductDaoTest &#123;    @Autowired    private ProductDao productDao;    /**     * 新增     */    @Test    public void save()&#123;        Product product = new Product();        product.setId(2L);        product.setTitle(&quot;华为手机&quot;);        product.setCategory(&quot;手机&quot;);        product.setPrice(2999.0);        product.setImages(&quot;http://www.atguigu/hw.jpg&quot;);        productDao.save(product);    &#125;    //POSTMAN, GET http://localhost:9200/product/_doc/2    //修改    @Test    public void update()&#123;        Product product = new Product();        product.setId(2L);        product.setTitle(&quot;小米 2 手机&quot;);        product.setCategory(&quot;手机&quot;);        product.setPrice(9999.0);        product.setImages(&quot;http://www.atguigu/xm.jpg&quot;);        productDao.save(product);    &#125;    //POSTMAN, GET http://localhost:9200/product/_doc/2</code></pre><p>​<br>        //根据 id 查询<br>        @Test<br>        public void findById(){<br>            Product product = productDao.findById(2L).get();<br>            System.out.println(product);<br>        }</p><pre><code>    @Test    public void findAll()&#123;        Iterable&lt;Product&gt; products = productDao.findAll();        for (Product product : products) &#123;            System.out.println(product);        &#125;    &#125;    //删除    @Test    public void delete()&#123;        Product product = new Product();        product.setId(2L);        productDao.delete(product);    &#125;    //POSTMAN, GET http://localhost:9200/product/_doc/2    //批量新增    @Test    public void saveAll()&#123;        List&lt;Product&gt; productList = new ArrayList&lt;&gt;();        for (int i = 0; i &lt; 10; i++) &#123;            Product product = new Product();            product.setId(Long.valueOf(i));            product.setTitle(&quot;[&quot;+i+&quot;]小米手机&quot;);            product.setCategory(&quot;手机&quot;);            product.setPrice(1999.0 + i);            product.setImages(&quot;http://www.atguigu/xm.jpg&quot;);            productList.add(product);        &#125;        productDao.saveAll(productList);    &#125;    //分页查询    @Test    public void findByPageable()&#123;        //设置排序(排序方式，正序还是倒序，排序的 id)        Sort sort = Sort.by(Sort.Direction.DESC,&quot;id&quot;);        int currentPage=0;//当前页，第一页从 0 开始， 1 表示第二页        int pageSize = 5;//每页显示多少条        //设置查询分页        PageRequest pageRequest = PageRequest.of(currentPage, pageSize,sort);        //分页查询        Page&lt;Product&gt; productPage = productDao.findAll(pageRequest);        for (Product Product : productPage.getContent()) &#123;            System.out.println(Product);        &#125;    &#125;&#125;</code></pre><h3 id="53-框架集成-SpringData-集成测试-文档搜索"><a href="#53-框架集成-SpringData-集成测试-文档搜索" class="headerlink" title="53-框架集成-SpringData-集成测试-文档搜索"></a>53-框架集成-SpringData-集成测试-文档搜索</h3><pre><code>import com.lun.dao.ProductDao;import com.lun.model.Product;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.index.query.TermQueryBuilder;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.domain.PageRequest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class SpringDataESSearchTest &#123;    @Autowired    private ProductDao productDao;    /**     * term 查询     * search(termQueryBuilder) 调用搜索方法，参数查询构建器对象     */    @Test    public void termQuery()&#123;        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(&quot;title&quot;, &quot;小米&quot;);                Iterable&lt;Product&gt; products = productDao.search(termQueryBuilder);        for (Product product : products) &#123;            System.out.println(product);        &#125;    &#125;    /**     * term 查询加分页     */    @Test    public void termQueryByPage()&#123;        int currentPage= 0 ;        int pageSize = 5;        //设置查询分页        PageRequest pageRequest = PageRequest.of(currentPage, pageSize);        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(&quot;title&quot;, &quot;小米&quot;);                Iterable&lt;Product&gt; products =                        productDao.search(termQueryBuilder,pageRequest);        for (Product product : products) &#123;            System.out.println(product);        &#125;    &#125;&#125;</code></pre><h3 id="54-框架集成-SparkStreaming-集成"><a href="#54-框架集成-SparkStreaming-集成" class="headerlink" title="54-框架集成-SparkStreaming-集成"></a>54-框架集成-SparkStreaming-集成</h3><p>Spark Streaming 是Spark core API的扩展，支持实时数据流的处理，并且具有可扩展，高吞吐量，容错的特点。数据可以从许多来源获取,如Kafka， Flume，Kinesis或TCP sockets，并且可以使用复杂的算法进行处理，这些算法使用诸如 map，reduce，join和 window等高级函数表示。最后，处理后的数据可以推送到文件系统，数据库等。实际上，您可以将Spark的机器学习和图形处理算法应用于数据流。</p><p>一、创建Maven项目。</p><p>二、修改 pom 文件，增加依赖关系。</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;project    xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;com.lun.es&lt;/groupId&gt;    &lt;artifactId&gt;sparkstreaming-elasticsearch&lt;/artifactId&gt;    &lt;version&gt;1.0&lt;/version&gt;    &lt;properties&gt;        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;    &lt;/properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;            &lt;artifactId&gt;spark-core_2.12&lt;/artifactId&gt;            &lt;version&gt;3.0.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;            &lt;artifactId&gt;spark-streaming_2.12&lt;/artifactId&gt;            &lt;version&gt;3.0.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;            &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;            &lt;version&gt;7.8.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- elasticsearch 的客户端 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;            &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;            &lt;version&gt;7.8.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- elasticsearch 依赖 2.x 的 log4j --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;            &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;            &lt;version&gt;2.8.2&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;            &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;            &lt;version&gt;2.8.2&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- &lt;dependency&gt;--&gt;        &lt;!-- &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;--&gt;        &lt;!-- &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;--&gt;        &lt;!-- &lt;version&gt;2.11.1&lt;/version&gt;--&gt;        &lt;!-- &lt;/dependency&gt;--&gt;        &lt;!-- &amp;lt;!&amp;ndash; junit 单元测试 &amp;ndash;&amp;gt;--&gt;        &lt;!-- &lt;dependency&gt;--&gt;        &lt;!-- &lt;groupId&gt;junit&lt;/groupId&gt;--&gt;        &lt;!-- &lt;artifactId&gt;junit&lt;/artifactId&gt;--&gt;        &lt;!-- &lt;version&gt;4.12&lt;/version&gt;--&gt;        &lt;!-- &lt;/dependency&gt;--&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><p>三、功能实现</p><pre><code>import org.apache.http.HttpHostimport org.apache.spark.SparkConfimport org.apache.spark.streaming.dstream.ReceiverInputDStreamimport org.apache.spark.streaming.&#123;Seconds, StreamingContext&#125;import org.elasticsearch.action.index.IndexRequestimport org.elasticsearch.client.indices.CreateIndexRequestimport org.elasticsearch.client.&#123;RequestOptions, RestClient, RestHighLevelClient&#125;import org.elasticsearch.common.xcontent.XContentTypeimport java.util.Dateobject SparkStreamingESTest &#123;    def main(args: Array[String]): Unit = &#123;        val sparkConf = new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;ESTest&quot;)        val ssc = new StreamingContext(sparkConf, Seconds(3))        val ds: ReceiverInputDStream[String] = ssc.socketTextStream(&quot;localhost&quot;, 9999)        ds.foreachRDD(            rdd =&gt; &#123;                println(&quot;*************** &quot; + new Date())                rdd.foreach(                    data =&gt; &#123;                        val client = new RestHighLevelClient(RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));                        // 新增文档 - 请求对象                        val request = new IndexRequest();                        // 设置索引及唯一性标识                        val ss = data.split(&quot; &quot;)                        println(&quot;ss = &quot; + ss.mkString(&quot;,&quot;))                        request.index(&quot;sparkstreaming&quot;).id(ss(0));                        val productJson =                            s&quot;&quot;&quot;                            | &#123; &quot;data&quot;:&quot;$&#123;ss(1)&#125;&quot; &#125;                            |&quot;&quot;&quot;.stripMargin;                        // 添加文档数据，数据格式为 JSON 格式                        request.source(productJson,XContentType.JSON);                        // 客户端发送请求，获取响应对象                        val response = client.index(request,                        RequestOptions.DEFAULT);                        System.out.println(&quot;_index:&quot; + response.getIndex());                        System.out.println(&quot;_id:&quot; + response.getId());                        System.out.println(&quot;_result:&quot; + response.getResult());                        client.close()                    &#125;                )            &#125;        )        ssc.start()        ssc.awaitTermination()    &#125;&#125;</code></pre><h3 id="55-框架集成-Flink-集成"><a href="#55-框架集成-Flink-集成" class="headerlink" title="55-框架集成-Flink-集成"></a>55-框架集成-Flink-集成</h3><p>Apache Spark是一-种基于内存的快速、通用、可扩展的大数据分析计算引擎。Apache Spark掀开了内存计算的先河，以内存作为赌注，贏得了内存计算的飞速发展。但是在其火热的同时，开发人员发现，在Spark中，计算框架普遍存在的缺点和不足依然没有完全解决，而这些问题随着5G时代的来临以及决策者对实时数据分析结果的迫切需要而凸显的更加明显：</p><ul><li>乱序数据，迟到数据</li><li>低延迟，高吞吐，准确性</li><li>容错性</li><li>数据精准一次性处理（Exactly-Once）</li></ul><p>Apache Flink是一个框架和分布式处理引擎，用于对无界和有界数据流进行有状态计算。在Spark火热的同时，也默默地发展自己，并尝试着解决其他计算框架的问题。慢慢地，随着这些问题的解决，Flink 慢慢被绝大数程序员所熟知并进行大力推广，阿里公司在2015年改进Flink，并创建了内部分支Blink，目前服务于阿里集团内部搜索、推荐、广告和蚂蚁等大量核心实时业务。</p><p>一、创建Maven项目。</p><p>二、修改 pom 文件，增加相关依赖类库。</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project    xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;com.lun.es&lt;/groupId&gt;    &lt;artifactId&gt;flink-elasticsearch&lt;/artifactId&gt;    &lt;version&gt;1.0&lt;/version&gt;    &lt;properties&gt;        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;    &lt;/properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;            &lt;artifactId&gt;flink-scala_2.12&lt;/artifactId&gt;            &lt;version&gt;1.12.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;            &lt;artifactId&gt;flink-streaming-scala_2.12&lt;/artifactId&gt;            &lt;version&gt;1.12.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;            &lt;artifactId&gt;flink-clients_2.12&lt;/artifactId&gt;            &lt;version&gt;1.12.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;            &lt;artifactId&gt;flink-connector-elasticsearch7_2.11&lt;/artifactId&gt;            &lt;version&gt;1.12.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- jackson --&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;            &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;            &lt;version&gt;2.11.1&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><p>三、功能实现</p><pre><code>import org.apache.flink.api.common.functions.RuntimeContext;import org.apache.flink.streaming.api.datastream.DataStreamSource;import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;import org.apache.flink.streaming.connectors.elasticsearch.ElasticsearchSinkFunction;import org.apache.flink.streaming.connectors.elasticsearch.RequestIndexer;import org.apache.flink.streaming.connectors.elasticsearch7.ElasticsearchSink;import org.apache.http.HttpHost;import org.elasticsearch.action.index.IndexRequest;import org.elasticsearch.client.Requests;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class FlinkElasticsearchSinkTest &#123;    public static void main(String[] args) throws Exception &#123;        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();        DataStreamSource&lt;String&gt; source = env.socketTextStream(&quot;localhost&quot;, 9999);        List&lt;HttpHost&gt; httpHosts = new ArrayList&lt;&gt;();        httpHosts.add(new HttpHost(&quot;127.0.0.1&quot;, 9200, &quot;http&quot;));        //httpHosts.add(new HttpHost(&quot;10.2.3.1&quot;, 9200, &quot;http&quot;));        // use a ElasticsearchSink.Builder to create an ElasticsearchSink        ElasticsearchSink.Builder&lt;String&gt; esSinkBuilder = new ElasticsearchSink.Builder&lt;&gt;(httpHosts,             new ElasticsearchSinkFunction&lt;String&gt;() &#123;                public IndexRequest createIndexRequest(String element) &#123;                    Map&lt;String, String&gt; json = new HashMap&lt;&gt;();                    json.put(&quot;data&quot;, element);                    return Requests.indexRequest()                        .index(&quot;my-index&quot;)                        //.type(&quot;my-type&quot;)                        .source(json);                &#125;                @Override                public void process(String element, RuntimeContext ctx, RequestIndexer indexer) &#123;                    indexer.add(createIndexRequest(element));                &#125;            &#125;        );        // configuration for the bulk requests; this instructs the sink to emit after every element, otherwise they would be buffered        esSinkBuilder.setBulkFlushMaxActions(1);        // provide a RestClientFactory for custom configuration on the internally createdREST client        // esSinkBuilder.setRestClientFactory(        // restClientBuilder -&gt; &#123;            // restClientBuilder.setDefaultHeaders(...)            // restClientBuilder.setMaxRetryTimeoutMillis(...)            // restClientBuilder.setPathPrefix(...)            // restClientBuilder.setHttpClientConfigCallback(...)        // &#125;        // );        source.addSink(esSinkBuilder.build());        env.execute(&quot;flink-es&quot;);    &#125;&#125;</code></pre><h2 id="第6章-Elasticsearch优化"><a href="#第6章-Elasticsearch优化" class="headerlink" title="第6章 Elasticsearch优化"></a>第6章 Elasticsearch优化</h2><h3 id="56-优化-硬件选择"><a href="#56-优化-硬件选择" class="headerlink" title="56-优化-硬件选择"></a>56-优化-硬件选择</h3><p>Elasticsearch 的基础是 Lucene，所有的索引和文档数据是存储在本地的磁盘中，具体的路径可在 ES 的配置文件…/config/elasticsearch.yml中配置，如下：</p><pre><code>## Path to directory where to store the data (separate multiple locations by comma):#path.data: /path/to/data## Path to log files:#path.logs: /path/to/logs</code></pre><p>磁盘在现代服务器上通常都是瓶颈。Elasticsearch重度使用磁盘，你的磁盘能处理的吞吐量越大，你的节点就越稳定。这里有一些优化磁盘I/O的技巧：</p><ul><li>使用SSD就像其他地方提过的，他们比机械磁盘优秀多了。</li><li>使用RAID0。条带化RAID会提高磁盘IO，代价显然就是当一块硬盘故障时整个就故障了。不要使用镜像或者奇偶校验RAID，因为副本已经提供了这个功能。</li><li>另外，使用多块硬盘，并允许Elasticsearch 通过多个path data目录配置把数据条带化分配到它们上面。</li><li>不要使用远程挂载的存储，比如NFS或者SMB/CIFS。这个引入的延迟对性能来说完全是背道而驰的。</li></ul><h3 id="57-优化-分片策略"><a href="#57-优化-分片策略" class="headerlink" title="57-优化-分片策略"></a>57-优化-分片策略</h3><h4 id="合理设置分片数"><a href="#合理设置分片数" class="headerlink" title="合理设置分片数"></a>合理设置分片数</h4><p>分片和副本的设计为 ES 提供了支持分布式和故障转移的特性，但并不意味着分片和副本是可以无限分配的。而且索引的分片完成分配后由于索引的路由机制，我们是不能重新修改分片数的。</p><p>可能有人会说，我不知道这个索引将来会变得多大，并且过后我也不能更改索引的大小，所以为了保险起见，还是给它设为 1000 个分片吧。但是需要知道的是，一个分片并不是没有代价的。需要了解：</p><ul><li><p>一个分片的底层即为一个 Lucene 索引，会消耗一定文件句柄、内存、以及 CPU运转。</p></li><li><p>每一个搜索请求都需要命中索引中的每一个分片，如果每一个分片都处于不同的节点还好， 但如果多个分片都需要在同一个节点上竞争使用相同的资源就有些糟糕了。</p></li><li><p>用于计算相关度的词项统计信息是基于分片的。如果有许多分片，每一个都只有很少的数据会导致很低的相关度。</p></li></ul><p>一个业务索引具体需要分配多少分片可能需要架构师和技术人员对业务的增长有个预先的判断，横向扩展应当分阶段进行。为下一阶段准备好足够的资源。 只有当你进入到下一个阶段，你才有时间思考需要作出哪些改变来达到这个阶段。一般来说，我们遵循一些原则：</p><ul><li>控制每个分片占用的硬盘容量不超过 ES 的最大 JVM 的堆空间设置（一般设置不超过 32G，参考下文的 JVM 设置原则），因此，如果索引的总容量在 500G 左右，那分片大小在 16 个左右即可；当然，最好同时考虑原则 2。</li><li>考虑一下 node 数量，一般一个节点有时候就是一台物理机，如果分片数过多，大大超过了节点数，很可能会导致一个节点上存在多个分片，一旦该节点故障，即使保持了 1 个以上的副本，同样有可能会导致数据丢失，集群无法恢复。所以， 一般都设置分片数不超过节点数的 3 倍。</li><li>主分片，副本和节点最大数之间数量，我们分配的时候可以参考以下关系：<br><code>节点数&lt;=主分片数 *（副本数+1）</code></li></ul><h4 id="推迟分片分配"><a href="#推迟分片分配" class="headerlink" title="推迟分片分配"></a>推迟分片分配</h4><p>对于节点瞬时中断的问题，默认情况，集群会等待一分钟来查看节点是否会重新加入，如果这个节点在此期间重新加入，重新加入的节点会保持其现有的分片数据，不会触发新的分片分配。这样就可以减少 ES 在自动再平衡可用分片时所带来的极大开销。</p><p>通过修改参数 delayed_timeout ，可以延长再均衡的时间，可以全局设置也可以在索引级别进行修改：</p><pre><code>#PUT /_all/_settings&#123;    &quot;settings&quot;: &#123;        &quot;index.unassigned.node_left.delayed_timeout&quot;: &quot;5m&quot;    &#125;&#125;</code></pre><h3 id="58-优化-路由选择"><a href="#58-优化-路由选择" class="headerlink" title="58-优化-路由选择"></a>58-优化-路由选择</h3><p>当我们查询文档的时候， Elasticsearch 如何知道一个文档应该存放到哪个分片中呢？它其实是通过下面这个公式来计算出来：</p><pre><code>shard = hash(routing) % number_of_primary_shards</code></pre><p>routing 默认值是文档的 id，也可以采用自定义值，比如用户 id。</p><h4 id="不带routing查询"><a href="#不带routing查询" class="headerlink" title="不带routing查询"></a>不带routing查询</h4><p>在查询的时候因为不知道要查询的数据具体在哪个分片上，所以整个过程分为2个步骤</p><ul><li>分发：请求到达协调节点后，协调节点将查询请求分发到每个分片上。</li><li>聚合：协调节点搜集到每个分片上查询结果，在将查询的结果进行排序，之后给用户返回结果。</li></ul><h4 id="带routing查询"><a href="#带routing查询" class="headerlink" title="带routing查询"></a>带routing查询</h4><p>查询的时候，可以直接根据routing 信息定位到某个分配查询，不需要查询所有的分配，经过协调节点排序。向上面自定义的用户查询，如果routing 设置为userid 的话，就可以直接查询出数据来，效率提升很多。</p><h3 id="59-优化-写入速度优化"><a href="#59-优化-写入速度优化" class="headerlink" title="59-优化-写入速度优化"></a>59-优化-写入速度优化</h3><p>ES 的默认配置，是综合了数据可靠性、写入速度、搜索实时性等因素。实际使用时，我们需要根据公司要求，进行偏向性的优化。</p><p>针对于搜索性能要求不高，但是对写入要求较高的场景，我们需要尽可能的选择恰当写优化策略。综合来说，可以考虑以下几个方面来提升写索引的性能：</p><ul><li>加大Translog Flush，目的是降低Iops、Writeblock。</li><li>增加Index Refesh间隔，目的是减少Segment Merge的次数。</li><li>调整Bulk 线程池和队列。</li><li>优化节点间的任务分布。</li><li>优化Lucene层的索引建立，目的是降低CPU及IO。</li></ul><h4 id="优化存储设备"><a href="#优化存储设备" class="headerlink" title="优化存储设备"></a>优化存储设备</h4><p>ES 是一种密集使用磁盘的应用，在段合并的时候会频繁操作磁盘，所以对磁盘要求较高，当磁盘速度提升之后，集群的整体性能会大幅度提高。</p><h4 id="合理使用合并"><a href="#合理使用合并" class="headerlink" title="合理使用合并"></a>合理使用合并</h4><p>Lucene 以段的形式存储数据。当有新的数据写入索引时， Lucene 就会自动创建一个新的段。</p><p>随着数据量的变化，段的数量会越来越多，消耗的多文件句柄数及 CPU 就越多，查询效率就会下降。</p><p>由于 Lucene 段合并的计算量庞大，会消耗大量的 I/O，所以 ES 默认采用较保守的策略，让后台定期进行段合并。</p><h4 id="减少-Refresh-的次数"><a href="#减少-Refresh-的次数" class="headerlink" title="减少 Refresh 的次数"></a>减少 Refresh 的次数</h4><p>Lucene 在新增数据时，采用了延迟写入的策略，默认情况下索引的refresh_interval 为1 秒。</p><p>Lucene 将待写入的数据先写到内存中，超过 1 秒（默认）时就会触发一次 Refresh，然后 Refresh 会把内存中的的数据刷新到操作系统的文件缓存系统中。</p><p>如果我们对搜索的实效性要求不高，可以将 Refresh 周期延长，例如 30 秒。</p><p>这样还可以有效地减少段刷新次数，但这同时意味着需要消耗更多的 Heap 内存。</p><h4 id="加大-Flush-设置"><a href="#加大-Flush-设置" class="headerlink" title="加大 Flush 设置"></a>加大 Flush 设置</h4><p>Flush 的主要目的是把文件缓存系统中的段持久化到硬盘，当 Translog 的数据量达到 512MB 或者 30 分钟时，会触发一次 Flush。</p><p>index.translog.flush_threshold_size 参数的默认值是 512MB，我们进行修改。</p><p>增加参数值意味着文件缓存系统中可能需要存储更多的数据，所以我们需要为操作系统的文件缓存系统留下足够的空间。</p><h4 id="减少副本的数量"><a href="#减少副本的数量" class="headerlink" title="减少副本的数量"></a>减少副本的数量</h4><p>ES 为了保证集群的可用性，提供了 Replicas（副本）支持，然而每个副本也会执行分析、索引及可能的合并过程，所以 Replicas 的数量会严重影响写索引的效率。</p><p>当写索引时，需要把写入的数据都同步到副本节点，副本节点越多，写索引的效率就越慢。</p><p>如果我们需要大批量进行写入操作，可以先禁止Replica复制，设置<br>index.number_of_replicas: 0 关闭副本。在写入完成后， Replica 修改回正常的状态。</p><h3 id="60-优化-内存设置"><a href="#60-优化-内存设置" class="headerlink" title="60-优化-内存设置"></a>60-优化-内存设置</h3><p>ES 默认安装后设置的内存是 1GB，对于任何一个现实业务来说，这个设置都太小了。如果是通过解压安装的 ES，则在 ES 安装文件中包含一个 jvm.option 文件，添加如下命令来设置 ES 的堆大小， Xms 表示堆的初始大小， Xmx 表示可分配的最大内存，都是 1GB。</p><p>确保 Xmx 和 Xms 的大小是相同的，其目的是为了能够在 Java 垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源，可以减轻伸缩堆大小带来的压力。</p><p>假设你有一个 64G 内存的机器，按照正常思维思考，你可能会认为把 64G 内存都给ES 比较好，但现实是这样吗， 越大越好？虽然内存对 ES 来说是非常重要的，但是答案是否定的！</p><p>因为 ES 堆内存的分配需要满足以下两个原则：</p><ul><li><p>不要超过物理内存的 50%： Lucene 的设计目的是把底层 OS 里的数据缓存到内存中。Lucene 的段是分别存储到单个文件中的，这些文件都是不会变化的，所以很利于缓存，同时操作系统也会把这些段文件缓存起来，以便更快的访问。如果我们设置的堆内存过大， Lucene 可用的内存将会减少，就会严重影响降低 Lucene 的全文本查询性能。</p></li><li><p>堆内存的大小最好不要超过 32GB：在 Java 中，所有对象都分配在堆上，然后有一个 Klass Pointer 指针指向它的类元数据。这个指针在 64 位的操作系统上为 64 位， 64 位的操作系统可以使用更多的内存（2^64）。在 32 位<br>的系统上为 32 位， 32 位的操作系统的最大寻址空间为 4GB（2^32）。<br>但是 64 位的指针意味着更大的浪费，因为你的指针本身大了。浪费内存不算，更糟糕的是，更大的指针在主内存和缓存器（例如 LLC, L1 等）之间移动数据的时候，会占用更多的带宽。</p></li></ul><p>最终我们都会采用 31 G 设置</p><ul><li>-Xms 31g</li><li>-Xmx 31g</li></ul><p>假设你有个机器有 128 GB 的内存，你可以创建两个节点，每个节点内存分配不超过 32 GB。也就是说不超过 64 GB 内存给 ES 的堆内存，剩下的超过 64 GB 的内存给 Lucene。</p><h3 id="61-优化-重要配置"><a href="#61-优化-重要配置" class="headerlink" title="61-优化-重要配置"></a>61-优化-重要配置</h3><div class="table-container"><table><thead><tr><th>参数名</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>cluster.name</td><td>elasticsearch</td><td>配置 ES 的集群名称，默认值是 ES，建议改成与所存数据相关的名称， ES 会自动发现在同一网段下的 集群名称相同的节点。</td></tr><tr><td>node.name</td><td>node-1</td><td>集群中的节点名，在同一个集群中不能重复。节点 的名称一旦设置，就不能再改变了。当然，也可以 设 置 成 服 务 器 的 主 机 名 称 ， 例 如 node.name:${HOSTNAME}。</td></tr><tr><td>node.master</td><td>true</td><td>指定该节点是否有资格被选举成为 Master 节点，默 认是 True，如果被设置为 True，则只是有资格成为 Master 节点，具体能否成为 Master 节点，需要通 过选举产生。</td></tr><tr><td>node.data</td><td>true</td><td>指定该节点是否存储索引数据，默认为 True。数据 的增、删、改、查都是在 Data 节点完成的。</td></tr><tr><td>index.number_of_shards</td><td>1</td><td>设置都索引分片个数，默认是 1 片。也可以在创建 索引时设置该值，具体设置为多大都值要根据数据 量的大小来定。如果数据量不大，则设置成 1 时效 率最高</td></tr><tr><td>index.number_of_replicas</td><td>1</td><td>设置默认的索引副本个数，默认为 1 个。副本数越 多，集群的可用性越好，但是写索引时需要同步的 数据越多。</td></tr><tr><td>transport.tcp.compress</td><td>true</td><td>设置在节点间传输数据时是否压缩，默认为 False， 不压缩</td></tr><tr><td>discovery.zen.minimum_master_nodes</td><td>1</td><td>设置在选举 Master 节点时需要参与的最少的候选 主节点数，默认为 1。如果使用默认值，则当网络 不稳定时有可能会出现脑裂。 合 理 的 数 值 为 (master_eligible_nodes/2)+1 ， 其 中 master_eligible_nodes 表示集群中的候选主节点数</td></tr><tr><td>discovery.zen.ping.timeout</td><td>3s</td><td>设置在集群中自动发现其他节点时 Ping 连接的超 时时间，默认为 3 秒。 在较差的网络环境下需要设置得大一点，防止因误 判该节点的存活状态而导致分片的转移</td></tr></tbody></table></div><h2 id="第7章-Elasticsearch面试题"><a href="#第7章-Elasticsearch面试题" class="headerlink" title="第7章 Elasticsearch面试题"></a>第7章 Elasticsearch面试题</h2><h3 id="62-面试题"><a href="#62-面试题" class="headerlink" title="62-面试题"></a>62-面试题</h3><h4 id="为什么要使用-Elasticsearch？"><a href="#为什么要使用-Elasticsearch？" class="headerlink" title="为什么要使用 Elasticsearch？"></a>为什么要使用 Elasticsearch？</h4><p>系统中的数据， 随着业务的发展，时间的推移， 将会非常多， 而业务中往往采用模糊查询进行数据的搜索， 而模糊查询会导致查询引擎放弃索引，导致系统查询数据时都是全表扫描，在百万级别的数据库中，查询效率是非常低下的，而我们使用 ES 做一个全文索引，将经常查询的系统功能的某些字段，比如说电商系统的商品表中商品名，描述、价格还有 id 这些字段我们放入 ES 索引库里，可以提高查询速度。</p><h4 id="Elasticsearch-的-master-选举流程？"><a href="#Elasticsearch-的-master-选举流程？" class="headerlink" title="Elasticsearch 的 master 选举流程？"></a>Elasticsearch 的 master 选举流程？</h4><ul><li>Elasticsearch的选主是ZenDiscovery模块负责的，主要包含Ping（节点之间通过这个RPC来发现彼此）<br>和Unicast（单播模块包含-一个主机列表以控制哪些节点需要ping通）这两部分。</li><li>对所有可以成为master的节点（node master: true）根据nodeId字典排序，每次选举每个节点都把自<br>己所知道节点排一次序，然后选出第一个（第0位）节点，暂且认为它是master节点。</li><li>如果对某个节点的投票数达到一定的值（可以成为master节点数n/2+1）并且该节点自己也选举自己，<br>那这个节点就是master。否则重新选举一直到满足上述条件。</li><li>master节点的职责主要包括集群、节点和索引的管理，不负责文档级别的管理；data节点可以关闭http<br>功能。</li></ul><h4 id="Elasticsearch-集群脑裂问题？"><a href="#Elasticsearch-集群脑裂问题？" class="headerlink" title="Elasticsearch 集群脑裂问题？"></a>Elasticsearch 集群脑裂问题？</h4><p>“脑裂”问题可能的成因：</p><ul><li>网络问题：集群间的网络延迟导致一些节点访问不到master, 认为master 挂掉了从而选举出新的master,并对master上的分片和副本标红，分配新的主分片。</li><li>节点负载：主节点的角色既为master又为data,访问量较大时可能会导致ES停止响应造成大面积延迟，此时其他节点得不到主节点的响应认为主节点挂掉了，会重新选取主节点。</li><li>内存回收：data 节点上的ES进程占用的内存较大，引发JVM的大规模内存回收，造成ES进程失去响应。</li></ul><p>脑裂问题解决方案：</p><ul><li><p>减少误判：discovery.zen ping_ timeout 节点状态的响应时间，默认为3s，可以适当调大，如果master在该响应时间的范围内没有做出响应应答，判断该节点已经挂掉了。调大参数（如6s，discovery.zen.ping_timeout:6），可适当减少误判。</p></li><li><p>选举触发：discovery.zen.minimum. <em>master</em> nodes:1，该参數是用于控制选举行为发生的最小集群主节点数量。当备选主节点的个數大于等于该参数的值，且备选主节点中有该参数个节点认为主节点挂了，进行选举。官方建议为(n / 2) +1, n为主节点个数（即有资格成为主节点的节点个数）。</p></li><li><p>角色分离：即master节点与data节点分离，限制角色</p><ul><li>主节点配置为：node master: true，node data: false</li><li>从节点配置为：node master: false，node data: true</li></ul></li></ul><h4 id="Elasticsearch-索引文档的流程？"><a href="#Elasticsearch-索引文档的流程？" class="headerlink" title="Elasticsearch 索引文档的流程？"></a>Elasticsearch 索引文档的流程？</h4><p><img src="../assets/elasticsearch/94707716cb1c7a5ab3dcf8b9e9288a10.png" alt=""></p><ul><li>协调节点默认使用文档 ID 参与计算（也支持通过 routing），以便为路由提供合适的分片：shard = hash(document_id) % (num_of_primary_shards)</li><li>当分片所在的节点接收到来自协调节点的请求后，会将请求写入到 Memory Buffer，然后定时（默认是每隔 1 秒）写入到 Filesystem Cache，这个从 Memory Buffer 到 Filesystem Cache 的过程就叫做 refresh；</li><li>当然在某些情况下，存在 Momery Buffer 和 Filesystem Cache 的数据可能会丢失， ES 是通过 translog的机制来保证数据的可靠性的。其实现机制是接收到请求后，同时也会写入到 translog 中，当 Filesystemcache 中的数据写入到磁盘中时，才会清除掉，这个过程叫做 flush；</li><li>在 flush 过程中，内存中的缓冲将被清除，内容被写入一个新段，段的 fsync 将创建一个新的提交点，并将内容刷新到磁盘，旧的 translog 将被删除并开始一个新的 translog。</li><li>flush 触发的时机是定时触发（默认 30 分钟）或者 translog 变得太大（默认为 512M）时；</li></ul><h4 id="Elasticsearch-更新和删除文档的流程？"><a href="#Elasticsearch-更新和删除文档的流程？" class="headerlink" title="Elasticsearch 更新和删除文档的流程？"></a>Elasticsearch 更新和删除文档的流程？</h4><ul><li>删除和更新也都是写操作，但是 Elasticsearch 中的文档是不可变的，因此不能被删除或者改动以展示其变更；</li><li>磁盘上的每个段都有一个相应的.del 文件。当删除请求发送后，文档并没有真的被删除，而是在.del文件中被标记为删除。该文档依然能匹配查询，但是会在结果中被过滤掉。当段合并时，在.del 文件中被标记为删除的文档将不会被写入新段。</li><li>在新的文档被创建时， Elasticsearch 会为该文档指定一个版本号，当执行更新时，旧版本的文档在.del文件中被标记为删除，新版本的文档被索引到一个新段。旧版本的文档依然能匹配查询，但是会在结果中被过滤掉。</li></ul><h4 id="Elasticsearch-搜索的流程？"><a href="#Elasticsearch-搜索的流程？" class="headerlink" title="Elasticsearch 搜索的流程？"></a>Elasticsearch 搜索的流程？</h4><p><img src="../assets/elasticsearch/e00c7b1b4f4af50ded147384bd07519c.png" alt=""></p><ul><li>搜索被执行成一个两阶段过程，我们称之为 Query Then Fetch；</li><li>在初始查询阶段时，查询会广播到索引中每一个分片拷贝（主分片或者副本分片）。 每个分片在本地执行搜索并构建一个匹配文档的大小为 from + size 的优先队列。 PS：在搜索的时候是会查询Filesystem Cache 的，但是有部分数据还在 Memory Buffer，所以搜索是近实时的。</li><li>每个分片返回各自优先队列中 所有文档的 ID 和排序值 给协调节点，它合并这些值到自己的优先队列中来产生一个全局排序后的结果列表。</li><li>接下来就是取回阶段， 协调节点辨别出哪些文档需要被取回并向相关的分片提交多个 GET 请求。每个分片加载并丰富文档，如果有需要的话，接着返回文档给协调节点。一旦所有的文档都被取回了，协调节点返回结果给客户端。</li><li>Query Then Fetch 的搜索类型在文档相关性打分的时候参考的是本分片的数据，这样在文档数量较少的时候可能不够准确， DFS Query Then Fetch 增加了一个预查询的处理，询问 Term 和 Document frequency，这个评分更准确，但是性能会变差。</li></ul><h4 id="Elasticsearch-在部署时，对-Linux-的设置有哪些优化方法？"><a href="#Elasticsearch-在部署时，对-Linux-的设置有哪些优化方法？" class="headerlink" title="Elasticsearch 在部署时，对 Linux 的设置有哪些优化方法？"></a>Elasticsearch 在部署时，对 Linux 的设置有哪些优化方法？</h4><ul><li><p>64 GB 内存的机器是非常理想的， 但是 32 GB 和 16 GB 机器也是很常见的。少于 8 GB 会适得其反。</p></li><li><p>如果你要在更快的 CPUs 和更多的核心之间选择，选择更多的核心更好。多个内核提供的额外并发远胜过稍微快一点点的时钟频率。</p></li><li><p>如果你负担得起 SSD，它将远远超出任何旋转介质。 基于 SSD 的节点，查询和索引性能都有提升。如果你负担得起， SSD 是一个好的选择。</p></li><li><p>即使数据中心们近在咫尺，也要避免集群跨越多个数据中心。绝对要避免集群跨越大的地理距离。</p></li><li><p>请确保运行你应用程序的 JVM 和服务器的 JVM 是完全一样的。 在 Elasticsearch 的几个地方，使用 Java 的本地序列化。</p></li><li><p>通过设置 gateway.recover_after_nodes、 gateway.expected_nodes、 gateway.recover_after_time 可以在集群重启的时候避免过多的分片交换，这可能会让数据恢复从数个小时缩短为几秒钟。</p></li><li><p>Elasticsearch 默认被配置为使用单播发现，以防止节点无意中加入集群。只有在同一台机器上运行的节点才会自动组成集群。最好使用单播代替组播。</p></li><li><p>不要随意修改垃圾回收器（CMS）和各个线程池的大小。</p></li><li><p>把你的内存的（少于）一半给 Lucene（但不要超过 32 GB！），通过 ES_HEAP_SIZE 环境变量设置。</p></li><li><p>内存交换到磁盘对服务器性能来说是致命的。如果内存交换到磁盘上，一个 100 微秒的操作可能变成 10 毫秒。 再想想那么多 10 微秒的操作时延累加起来。 不难看出 swapping 对于性能是多么可怕。</p></li><li><p>Lucene 使用了大量的文件。同时， Elasticsearch 在节点和 HTTP 客户端之间进行通信也使用了大量的套接字。 所有这一切都需要足够的文件描述符。你应该增加你的文件描述符，设置一个很大的值，如 64,000。</p></li></ul><h4 id="GC-方面，在使用-Elasticsearch-时要注意什么？"><a href="#GC-方面，在使用-Elasticsearch-时要注意什么？" class="headerlink" title="GC 方面，在使用 Elasticsearch 时要注意什么？"></a>GC 方面，在使用 Elasticsearch 时要注意什么？</h4><p>倒排词典的索引需要常驻内存，无法 GC，需要监控 data node 上 segment memory 增长趋势。</p><p>各类缓存， field cache, filter cache, indexing cache, bulk queue 等等，要设置合理的大小，并且要应该根据最坏的情况来看 heap 是否够用，也就是各类缓存全部占满的时候，还有 heap 空间可以分配给其他任务吗？避免采用 clear cache 等“自欺欺人”的方式来释放内存。</p><p>避免返回大量结果集的搜索与聚合。确实需要大量拉取数据的场景，可以采用 scan &amp; scroll api 来实现。</p><p>cluster stats 驻留内存并无法水平扩展，超大规模集群可以考虑分拆成多个集群通过 tribe node 连接。</p><p>想知道 heap 够不够，必须结合实际应用场景，并对集群的 heap 使用情况做持续的监控。</p><h4 id="Elasticsearch-对于大数据量（上亿量级）的聚合如何实现？"><a href="#Elasticsearch-对于大数据量（上亿量级）的聚合如何实现？" class="headerlink" title="Elasticsearch 对于大数据量（上亿量级）的聚合如何实现？"></a>Elasticsearch 对于大数据量（上亿量级）的聚合如何实现？</h4><p>Elasticsearch 提供的首个近似聚合是 cardinality 度量。它提供一个字段的基数，即该字段的 distinct或者 unique 值的数目。它是基于 HLL 算法的。 HLL 会先对我们的输入作哈希运算，然后根据哈希运算的结果中的 bits 做概率估算从而得到基数。其特点是：可配置的精度，用来控制内存的使用（更精确 ＝ 更多内存）；小的数据集精度是非常高的；我们可以通过配置参数，来设置去重需要的固定内存使用量。无论数千还是数十亿的唯一值，内存使用量只与你配置的精确度相关。</p><h4 id="在并发情况下，-Elasticsearch-如果保证读写一致？"><a href="#在并发情况下，-Elasticsearch-如果保证读写一致？" class="headerlink" title="在并发情况下， Elasticsearch 如果保证读写一致？"></a>在并发情况下， Elasticsearch 如果保证读写一致？</h4><ul><li><p>可以通过版本号使用乐观并发控制，以确保新版本不会被旧版本覆盖，由应用层来处理具体的冲突；</p></li><li><p>另外对于写操作，一致性级别支持 quorum/one/all，默认为 quorum，即只有当大多数分片可用时才允许写操作。但即使大多数可用，也可能存在因为网络等原因导致写入副本失败，这样该副本被认为故障，分片将会在一个不同的节点上重建。</p></li><li><p>对于读操作，可以设置 replication 为 sync(默认)，这使得操作在主分片和副本分片都完成后才会返回；如果设置 replication 为 async 时，也可以通过设置搜索请求参数_preference 为 primary 来查询主分片，确保文档是最新版本。</p></li></ul><h4 id="如何监控-Elasticsearch-集群状态？"><a href="#如何监控-Elasticsearch-集群状态？" class="headerlink" title="如何监控 Elasticsearch 集群状态？"></a>如何监控 Elasticsearch 集群状态？</h4><pre><code>1. elasticsearch-head 插件。2. 通过 Kibana 监控 Elasticsearch。你可以实时查看你的集群健康状态和性能，也可以分析过去的集群、索引和节点指标</code></pre><h4 id="是否了解字典树？"><a href="#是否了解字典树？" class="headerlink" title="是否了解字典树？"></a>是否了解字典树？</h4><p>字典树又称单词查找树， Trie 树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。</p><p>Trie 的核心思想是空间换时间，利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。它有 3 个基本性质：</p><ul><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</li><li>每个节点的所有子节点包含的字符都不相同。</li></ul><p>对于中文的字典树，每个节点的子节点用一个哈希表存储，这样就不用浪费太大的空间，而且查询速度上可以保留哈希的复杂度 O(1)。</p><h4 id="Elasticsearch-中的集群、节点、索引、文档、类型是什么？"><a href="#Elasticsearch-中的集群、节点、索引、文档、类型是什么？" class="headerlink" title="Elasticsearch 中的集群、节点、索引、文档、类型是什么？"></a>Elasticsearch 中的集群、节点、索引、文档、类型是什么？</h4><ul><li>集群是一个或多个节点（服务器）的集合，它们共同保存您的整个数据，并提供跨所有节点的联合索引和搜索功能。群集由唯一名 称标识，默认情况下为”elasticsearch”。此名称很重要，因为如果节点设置为按名称加入群集，则该节点只能是群集的一部分。</li><li>节点是属于集群一部分的单个服务器。它存储数据并参与群集索引和搜索功能。</li><li>索引就像关系数据库中的“数据库”。它有一个定义多种类型的映射。索引是逻辑名称空间，映射到一个或多个主分片，并且可以有零个或多个副本分片。MySQL =&gt;数据库，Elasticsearch=&gt;索引。</li><li>文档类似于关系数据库中的一行。不同之处在于索引中的每个文档可以具有不同的结构(字段)，但是对于通用字段应该具有相同的数据类型。MySQL =&gt; Databases =&gt; Tables =&gt; Columns / Rows，Elasticsearch=&gt; Indices =&gt; Types =&gt;具有属性的文档Doc。</li><li>类型是索引的逻辑类别/分区，其语义完全取决于用户。</li></ul><h4 id="Elasticsearch-中的倒排索引是什么？"><a href="#Elasticsearch-中的倒排索引是什么？" class="headerlink" title="Elasticsearch 中的倒排索引是什么？"></a>Elasticsearch 中的倒排索引是什么？</h4><p>倒排索引是搜索引擎的核心。搜索引擎的主要目标是在查找发生搜索条件的文档时提供快速搜索。ES中的倒排索引其实就是 lucene 的倒排索引，区别于传统的正向索引， 倒排索引会再存储数据时将关键词和数据进行关联，保存到倒排表中，然后查询时，将查询内容进行分词后在倒排表中进行查询，最后匹配数据即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/2013454d.html"/>
      <url>/posts/2013454d.html</url>
      
        <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
